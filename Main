package main;

import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Scanner;

public class main extends JFrame implements ActionListener {
	JFrame f;
	JMenu options;
	JMenuItem main, favorites, logout;
	JPanel loginP, signupP, selectP, displayP, favoritesP;
	JButton b, login, signup, createAccount;
	JLabel l1, l2, selected, user, pass;
	JTextField tf, username, usernameSignUp;
	JPasswordField password, passwordSignUp;
	JCheckBox microwave, avocado, turkey, bread, lettuce, tomato, ham, cheese, butter, tuna, mayo, tortilla,
			refriedBeans, creamCheese, tortillaChips, beans, egg, bacon, englishMuffin, hashBrown, potato, sourCream,
			meat, corn, dressing, mustard, crackers;
	boolean[] appliances;
	boolean[] checked;
	boolean mbDisplay = false;
	boolean validLogin = false;
	String checkedBox;
	String[] ingredients;
	ArrayList<String> userLog = new ArrayList<String>();
	ArrayList<String> passLog = new ArrayList<String>();
	ArrayList<String> userIngredients = new ArrayList<String>();

	main() {
		f = new JFrame("MyBook");
		Image icon = Toolkit.getDefaultToolkit().getImage("src/images/MyBookLogo.png");
		f.setIconImage(icon);

		// Menu Bar
		JMenuBar mb = new JMenuBar();
		options = new JMenu("Options");
		main = new JMenuItem("Search");
		favorites = new JMenuItem("Favorites");
		logout = new JMenuItem("Logout");
		mb.add(options);
		options.add(main);
		options.add(favorites);
		options.add(logout);
		mb.setVisible(true);
		f.setJMenuBar(mb);
		main.addActionListener(this);
		favorites.addActionListener(this);
		logout.addActionListener(this);

		// Panels
		loginP = new JPanel();
		loginP.setBounds(0, 0, 900, 650);
		loginP.setBackground(Color.orange);
		loginP.setLayout(null);
		signupP = new JPanel();
		signupP.setBounds(0, 0, 900, 650);
		signupP.setBackground(Color.orange);
		signupP.setLayout(null);
		selectP = new JPanel();
		selectP.setBounds(0, 0, 900, 650);
		selectP.setBackground(Color.gray);
		selectP.setLayout(null);
		displayP = new JPanel();
		displayP.setBounds(0, 0, 900, 650);
		displayP.setBackground(Color.white);
		displayP.setLayout(null);
		favoritesP = new JPanel();
		favoritesP.setBounds(0, 0, 900, 650);
		favoritesP.setBackground(Color.green);
		favoritesP.setLayout(null);

		// Ingredients List
		checked = new boolean[26];
		ingredients = new String[] { "Avocado", "Turkey", "Bread", "Lettuce", "Tomato", "Ham", "Cheese", "Butter",
				"Tuna", "Mayo", "Tortilla", "Refried Beans", "Cream Cheese", "Tortilla Chips", "Beans", "Egg", "Bacon",
				"English Muffin", "Hash Brown", "Potato", "Sour Cream", "Meat", "Corn", "Dressing", "Mustard",
				"Crackers" };
		avocado = new JCheckBox("Avocado");
		avocado.setBounds(100, 100, 112, 15);
		turkey = new JCheckBox("Turkey");
		turkey.setBounds(100, 140, 112, 15);
		bread = new JCheckBox("Bread");
		bread.setBounds(100, 180, 112, 15);
		lettuce = new JCheckBox("Lettuce");
		lettuce.setBounds(100, 220, 112, 15);
		tomato = new JCheckBox("Tomato");
		tomato.setBounds(100, 260, 112, 15);
		ham = new JCheckBox("Ham");
		ham.setBounds(100, 300, 112, 15);
		cheese = new JCheckBox("Cheese");
		cheese.setBounds(275, 100, 112, 15);
		butter = new JCheckBox("Butter");
		butter.setBounds(275, 140, 112, 15);
		tuna = new JCheckBox("Tuna");
		tuna.setBounds(275, 180, 112, 15);
		mayo = new JCheckBox("Mayo");
		mayo.setBounds(275, 220, 112, 15);
		tortilla = new JCheckBox("Tortilla");
		tortilla.setBounds(275, 260, 112, 15);
		refriedBeans = new JCheckBox("Refried Beans");
		refriedBeans.setBounds(275, 300, 112, 15);
		creamCheese = new JCheckBox("Cream Cheese");
		creamCheese.setBounds(450, 100, 112, 15);
		tortillaChips = new JCheckBox("Tortilla Chips");
		tortillaChips.setBounds(450, 140, 112, 15);
		beans = new JCheckBox("Beans");
		beans.setBounds(450, 180, 112, 15);
		egg = new JCheckBox("Eggs");
		egg.setBounds(450, 220, 112, 15);
		bacon = new JCheckBox("Bacon");
		bacon.setBounds(450, 260, 112, 15);
		englishMuffin = new JCheckBox("English Muffin");
		englishMuffin.setBounds(450, 300, 112, 15);
		hashBrown = new JCheckBox("Hash Brown");
		hashBrown.setBounds(625, 100, 112, 15);
		potato = new JCheckBox("Potato");
		potato.setBounds(625, 140, 112, 15);
		sourCream = new JCheckBox("Sour Cream");
		sourCream.setBounds(625, 180, 112, 15);
		meat = new JCheckBox("Meat");
		meat.setBounds(625, 220, 112, 15);
		corn = new JCheckBox("Corn");
		corn.setBounds(625, 260, 112, 15);
		dressing = new JCheckBox("Dressing");
		dressing.setBounds(625, 300, 112, 15);
		mustard = new JCheckBox("Mustard");
		mustard.setBounds(100, 340, 112, 15);
		crackers = new JCheckBox("Crackers");
		crackers.setBounds(275, 340, 112, 15);

		// Time
		l1 = new JLabel("Time:");
		l2 = new JLabel(); // Results of time input
		selected = new JLabel(); // Results of selected ingredients
		l1.setBounds(375, 415, 500, 200);
		l2.setBounds(50, 100, 500, 200);
		selected.setBounds(100, 200, 500, 200);
		tf = new JTextField();
		tf.setBounds(420, 507, 50, 20);

		// Appliances
		appliances = new boolean[1];
		microwave = new JCheckBox("Microwave");
		microwave.setBounds(140, 507, 90, 15);

		// Search/Enter Button
		b = new JButton("Search");
		b.setBounds(600, 500, 80, 30);
		b.setBackground(Color.green);
		b.addActionListener(this);

		// Panel Login
		login = new JButton("Login");
		login.setBounds(410, 400, 80, 30);
		login.setBackground(Color.white);
		login.addActionListener(this);
		loginP.add(login);
		signup = new JButton("Sign Up");
		signup.setBounds(410, 450, 80, 30);
		signup.setBackground(Color.white);
		signup.addActionListener(this);
		loginP.add(signup);
		username = new JTextField("");
		username.setBounds(350, 250, 200, 30);
		user = new JLabel("Username:");
		user.setBounds(350, 220, 80, 30);
		loginP.add(username);
		loginP.add(user);
		password = new JPasswordField();
		password.setBounds(350, 330, 200, 30);
		pass = new JLabel("Password:");
		pass.setBounds(350, 300, 80, 30);
		loginP.add(password);
		loginP.add(pass);
		loginP.setVisible(true);

		// Panel Signup
		createAccount = new JButton("Create Account");
		createAccount.setBounds(375, 400, 150, 30);
		createAccount.setBackground(Color.white);
		createAccount.addActionListener(this);
		signupP.add(createAccount);
		usernameSignUp = new JTextField("");
		usernameSignUp.setBounds(350, 250, 200, 30);
		user = new JLabel("Username:");
		user.setBounds(350, 220, 80, 30);
		signupP.add(usernameSignUp);
		signupP.add(user);
		passwordSignUp = new JPasswordField();
		passwordSignUp.setBounds(350, 330, 200, 30);
		pass = new JLabel("Password:");
		pass.setBounds(350, 300, 80, 30);
		signupP.add(passwordSignUp);
		signupP.add(pass);
		signupP.setVisible(false);

		// Panel Select
		selectP.add(b);
		selectP.add(tf);
		selectP.add(avocado);
		selectP.add(turkey);
		selectP.add(bread);
		selectP.add(lettuce);
		selectP.add(tomato);
		selectP.add(ham);
		selectP.add(cheese);
		selectP.add(butter);
		selectP.add(tuna);
		selectP.add(mayo);
		selectP.add(tortilla);
		selectP.add(refriedBeans);
		selectP.add(creamCheese);
		selectP.add(tortillaChips);
		selectP.add(beans);
		selectP.add(egg);
		selectP.add(bacon);
		selectP.add(englishMuffin);
		selectP.add(hashBrown);
		selectP.add(potato);
		selectP.add(sourCream);
		selectP.add(meat);
		selectP.add(corn);
		selectP.add(dressing);
		selectP.add(mustard);
		selectP.add(crackers);
		selectP.add(microwave);
		selectP.add(l1);
		selectP.add(tf);
		selectP.setVisible(false);

		// Panel Display
		displayP.add(selected);
		displayP.add(l2);
		displayP.setVisible(false);

		// Panel Favorites
		favoritesP.setVisible(false);

		// JFrame
		f.add(loginP);
		f.add(signupP);
		f.add(selectP);
		f.add(displayP);
		f.add(favoritesP);

		// Buttons Selected
		microwave.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				appliances[0] = (e.getStateChange() == 1 ? true : false);
			}
		});
		avocado.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[0] = (e.getStateChange() == 1 ? true : false);
			}
		});
		turkey.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[1] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bread.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[2] = (e.getStateChange() == 1 ? true : false);
			}
		});
		lettuce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[3] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tomato.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[4] = (e.getStateChange() == 1 ? true : false);
			}
		});
		ham.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[5] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cheese.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[6] = (e.getStateChange() == 1 ? true : false);
			}
		});
		butter.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[7] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tuna.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[8] = (e.getStateChange() == 1 ? true : false);
			}
		});
		mayo.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[9] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tortilla.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[10] = (e.getStateChange() == 1 ? true : false);
			}
		});
		refriedBeans.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[11] = (e.getStateChange() == 1 ? true : false);
			}
		});
		creamCheese.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[12] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tortillaChips.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[13] = (e.getStateChange() == 1 ? true : false);
			}
		});
		beans.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[14] = (e.getStateChange() == 1 ? true : false);
			}
		});
		egg.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[15] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bacon.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[16] = (e.getStateChange() == 1 ? true : false);
			}
		});
		englishMuffin.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[17] = (e.getStateChange() == 1 ? true : false);
			}
		});
		hashBrown.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[18] = (e.getStateChange() == 1 ? true : false);
			}
		});
		potato.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[19] = (e.getStateChange() == 1 ? true : false);
			}
		});
		sourCream.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[20] = (e.getStateChange() == 1 ? true : false);
			}
		});
		meat.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[21] = (e.getStateChange() == 1 ? true : false);
			}
		});
		corn.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[22] = (e.getStateChange() == 1 ? true : false);
			}
		});
		dressing.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[23] = (e.getStateChange() == 1 ? true : false);
			}
		});
		mustard.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[24] = (e.getStateChange() == 1 ? true : false);
			}
		});
		crackers.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[25] = (e.getStateChange() == 1 ? true : false);
			}
		});

		f.setSize(900, 650);
		f.setLayout(null);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}

	// clickButton.exe
	public void actionPerformed(ActionEvent e) {
		// Menu Selections
		if (e.getSource() == main) {
			if (mbDisplay) {
				selectP.setVisible(true);
				displayP.setVisible(false);
				favoritesP.setVisible(false);
			}
		}
		if (e.getSource() == favorites) {
			if (mbDisplay) {
				favoritesP.setVisible(true);
				selectP.setVisible(false);
				displayP.setVisible(false);
			}
		}
		if (e.getSource() == logout) {
			if (mbDisplay) {
				favoritesP.setVisible(false);
				selectP.setVisible(false);
				displayP.setVisible(false);
				loginP.setVisible(true);
				username.setText("");
				password.setText("");
			}
		}
		if (e.getSource() == b) {
			// Display Time Entered
			try {
				String text = tf.getText();
				if (text.equals(""))
					l2.setText("No time was entered; displaying all recipes.");
				else {
					int time = Integer.parseInt(text);
					l2.setText("Displaying recipes that can be made in " + time + " minutes or less.");
				}
			} catch (Exception ex) {
				System.out.println(ex);
			}

			// Display Selected Ingredients
			checkedBox = "Selected Ingredients: ";
			int firstIngredient = 0;
			for (int i = 0; i < checked.length; i++) {
				if (checked[i]) {
					if (firstIngredient > 0)
						checkedBox += ", ";
					else
						firstIngredient++;
					checkedBox += ingredients[i];
					userIngredients.add(ingredients[i]);
				}
			}
			selected.setText(checkedBox);

			// Switch Panes
			selectP.setVisible(false);
			favoritesP.setVisible(false);
			displayP.setVisible(true);
		}
		if (e.getSource() == login) {
			String userStr = username.getText();
			String passStr = new String(password.getPassword());
			for (int i = 0; i < userLog.size(); i++) {
				if (userStr.equals(userLog.get(i))) {
					if(passStr.equals(passLog.get(i))) {
						validLogin = true;
					}
					else {
						i = userLog.size();
					}
				}
			}
			if (validLogin) {
				selectP.setVisible(true);
				loginP.setVisible(false);
				mbDisplay = true;
			} else {
				JOptionPane.showMessageDialog(f, "Username or password is incorrect.");
			}
		}
		if (e.getSource() == signup) {
			loginP.setVisible(false);
			signupP.setVisible(true);
			usernameSignUp.setText("");
			passwordSignUp.setText("");
		}
		if (e.getSource() == createAccount) {
			String userStr = usernameSignUp.getText();
			String passStr = new String(passwordSignUp.getPassword());
			if (userStr.equals("") || passStr.equals("")) {
				JOptionPane.showMessageDialog(f, "Username and Password must not be blank.");
			} else {
				userLog.add(userStr);
				passLog.add(passStr);
				signupP.setVisible(false);
				loginP.setVisible(true);
				JOptionPane.showMessageDialog(f, "Account has been created.");
			}
		}
	}

	public static void main(String[] args) {
		new main();
		fakeDatabase holder = new fakeDatabase();
		holder.fillDatabase();

		ArrayList<String> putInMethod = new ArrayList<String>();
		putInMethod.add("avocado");
		putInMethod.add("egg");
		putInMethod.add("ham");
		putInMethod.add("turkey");
		putInMethod.add("tortilla");
		putInMethod.add("cheese");
		putInMethod.add("butter");
		putInMethod.add("lettuce");
		putInMethod.add("dressing");
		putInMethod.add("tomato");
		putInMethod.add("bread");
		putInMethod.add("cream cheese");

		ArrayList<fakeRecipe> validRecipes = new ArrayList<fakeRecipe>();
		validRecipes = searchRecipe(10, "true", putInMethod, holder.getFakeRecipes());
		for (int i = 0; i < validRecipes.size(); i++) {
			System.out.println(validRecipes.get(i).getName());
			System.out.println(validRecipes.get(i).getTime());
			System.out.println(validRecipes.get(i).getLink());
			System.out.println(validRecipes.get(i).getIngredientList());
			System.out.println("");
		}
	}

	static ArrayList<fakeRecipe> searchRecipe( int time, String microwaveable, ArrayList<String> userInput,ArrayList<fakeRecipe> database) {

		ArrayList<fakeRecipe> sendToMain = new ArrayList<fakeRecipe>();
		boolean validRecipe = true;
		for(int i = 0; i < database.size(); i++)
		{
			if( (userInput.contains("turkey") && !(database.get(i).getIngredientList().contains("turkey"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("ham") && !(database.get(i).getIngredientList().contains("ham"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("avocado") && !(database.get(i).getIngredientList().contains("avocado"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("bread") && !(database.get(i).getIngredientList().contains("bread"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("butter") && !(database.get(i).getIngredientList().contains("butter"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("eggs") && !(database.get(i).getIngredientList().contains("eggs"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("cheese") && !(database.get(i).getIngredientList().contains("cheese"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("lettuce") && !(database.get(i).getIngredientList().contains("lettuce"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("tomato") && !(database.get(i).getIngredientList().contains("tomato"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("tortilla") && !(database.get(i).getIngredientList().contains("tortilla"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("cream cheese") && !(database.get(i).getIngredientList().contains("cream cheese"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("beans") && !(database.get(i).getIngredientList().contains("beans"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("potato") && !(database.get(i).getIngredientList().contains("potato"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("dressing") && !(database.get(i).getIngredientList().contains("dressing"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("mustard") && !(database.get(i).getIngredientList().contains("mustard"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("crackers") && !(database.get(i).getIngredientList().contains("crackers"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("corn") && !(database.get(i).getIngredientList().contains("corn"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("sour cream") && !(database.get(i).getIngredientList().contains("sour cream"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("english muffin") && !(database.get(i).getIngredientList().contains("english muffin"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("bacon") && !(database.get(i).getIngredientList().contains("bacon"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("refried beans") && !(database.get(i).getIngredientList().contains("refried beans"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("tuna") && !(database.get(i).getIngredientList().contains("tuna"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("hash brown") && !(database.get(i).getIngredientList().contains("hash brown"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("meat") && !(database.get(i).getIngredientList().contains("meat"))))
			{
				validRecipe = false;
			}
			if( (userInput.contains("tortilla chips") && !(database.get(i).getIngredientList().contains("tortilla chips"))))
			{
				validRecipe = false;
			}
			if((userInput.contains("mayo") && !(database.get(i).getIngredientList().contains("mayo"))))
			{
				validRecipe = false;
			}
			if(validRecipe = true)
			{
				sendToMain.add(database.get(i));
			}
			for(int j = 0; j < sendToMain.size(); j++)
			{
				if(sendToMain.get(j).getTime() > time)
				{
					sendToMain.remove(j);
				}
			}
			for(int k = 0; k < sendToMain.size(); k++)
			{
				if(!(sendToMain.get(k).getMicrowaveable().equals(microwaveable)) && sendToMain.get(k).getMicrowaveable().equals("true"))
				{
					sendToMain.remove(k);
				}
			}
		}
		
		return sendToMain;
	}
	}
}
