package main;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.util.Scanner;

public class main extends JFrame implements ActionListener{
	JFrame f;
	JPanel select = new JPanel(), display = new JPanel();
	JButton b;
	JLabel l1,l2,selected;
	JTextField tf;
	JCheckBox microwave,cb1,cb2;
	String checkedBox;
	boolean[] appliances;
	boolean[] checked;
	String[] ingredients;
	
	main(){
		f = new JFrame("MyBook");
		Image icon = Toolkit.getDefaultToolkit().getImage("src/images/MyBookLogo.png");
		f.setIconImage(icon);
		
		//Panels
		select.setBounds(0,0,900,650);
		select.setBackground(Color.gray);
		display.setBounds(0,0,900,650);
		display.setBackground(Color.white);
		
		//Ingredients List
		checked = new boolean[2];
		ingredients = new String[] {"Avocado","Milk"};
		cb1 = new JCheckBox("Avocado");
		cb1.setBounds(100,100,80,15);
		cb2 = new JCheckBox("Milk");
		cb2.setBounds(100,150,50,15);
		
		//Time
		l1 = new JLabel("Time:");
		l2 = new JLabel(); //Results of time input
		selected = new JLabel(); //Results of selected ingredients
		l1.setBounds(375,415,500,200);
		l2.setBounds(50,100,500,200);
		selected.setBounds(100,200,500,200);
		tf = new JTextField();
		tf.setBounds(420,507,50,20);
		
		//Appliances
		appliances = new boolean[1];
		microwave = new JCheckBox("Microwave");
		microwave.setBounds(140,507,90,15);
		
		//Search/Enter Button
		b = new JButton("Search");
		b.setBounds(100,100,80,30);
		b.setBackground(Color.green);
		b.addActionListener(this);
		
		//Panel Select
		select.add(b);select.add(tf);select.add(cb1);select.add(cb2);
		select.add(microwave);select.add(l1);select.add(tf);
		select.setVisible(true);
		
		//Panel Display
		display.add(selected);display.add(l2);
		display.setVisible(false);
		
		//JFrame
		f.add(select);f.add(display);
		
		//Buttons Selected
		microwave.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				appliances[0] = (e.getStateChange()==1?true:false);
			}
		});
		cb1.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[0] = (e.getStateChange()==1?true:false);
			}
		});
		cb2.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[1] = (e.getStateChange()==1?true:false);
			}
		});
		
		f.setSize(900,650);
		f.setLayout(null);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	//clickButton.exe
	public void actionPerformed(ActionEvent e) {
		try {
			String text = tf.getText();
			int time = Integer.parseInt(text);
			l2.setText("It worked fuck yeah. Also, here's what you entered: " + time);
			checkedBox = "Selected Ingredients: ";
			int firstIngredient = 0;
			for(int i = 0; i < checked.length; i++)	{
				if(checked[i]) {
					if(firstIngredient > 0)
						checkedBox += ", ";
					else
						firstIngredient++;
					checkedBox += ingredients[i];
				}
			}
			selected.setText(checkedBox);
		}catch(Exception ex) {System.out.println(ex);}
		select.setVisible(false);
		display.setVisible(true);
	}
	
	public static void main(String[] args) {
		new main();
		
		System.out.println("Enter an ingredient");                                      //This is our fake user interface for the sake of simplicity in the architecture
        Scanner in = new Scanner(System.in);                                            
        String ingredient = in.nextLine();                                              //testing if we can store an ingredient object based on user input
        Ingredient firstIngredient = new Ingredient(ingredient);                        
        System.out.println("Ingredient returned: " +firstIngredient.getName());                                             
        
        System.out.println("Enter an appliance");                                       //testing if we can store an appliance object based off user input
        String appliance = in.nextLine();
        Appliance firstAppliance = new Appliance(appliance);
        System.out.println("appliance returned: " + firstAppliance.getName());
        
        System.out.println("Enter a time");                                             // testing if we can store time object based off user input
        int time = in.nextInt();
        Time firstTime = new Time(time);
        System.out.println("time returned: " + firstTime.getTime());
        
        
        String recipe = SearchSystem.RecipeSearch();                                // this is our mock calls to the search system based off user input
        System.out.println(recipe);
	}
}
