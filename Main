package main;

import javax.swing.*;
import javax.swing.text.AttributeSet.ColorAttribute;
import java.awt.event.*;
import java.awt.*;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;

public class main extends JFrame implements ActionListener {
	private static final long serialVersionUID = 1L;

	JFrame f;
	JMenu main, profile, options;
	JMenuItem home, search, favorites, customize, changePassword, changeDisplayColor, logout;
	JPanel homeP, homeDisplayP, loginP, loginButtonsP, signupP, signupButtonsP, selectP, displayP, favoritesP,
			customizeP, changeDisplayP, selectDisplayP, changePasswordP, selectProfileP, displayProfileP, recipeTitleP,
			recipeDescriptionP, securityP, securityQuestionsP, forgotPasswordP, forgotPasswordQuestionsP,
			forgotPasswordUsernameP, forgotPasswordPasswordP, fruitsP, vegetablesP, grainsP, proteinsP, dairysP,
			condimentsP, seasoningsP, miscP;
	JTabbedPane tabbedIngredients;
	JButton b, login, signup, createAccount, homeSearch, homeFavorites, homeCustomize, changePasswordB, back,
			nextRecipe, previousRecipe, submitAnswers, forgotPassword, submitUser, answerQuestions, fChangePasswordB,
			clearAll;
	JRadioButton p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
	JLabel l1, l2, selected, user, pass, profilePic, logo, logoName, displayName, welcome, mbhelp, homeButtons,
			currPassword, newPassword, confirmNewPassword, recipeTitle, recipeTime, recipeLink, recipeIngredientList,
			microwaveRequired, fquestion1, fquestion2, fquestion3, fUser, fCurrPassword, fNewPassword,
			fConfirmNewPassword, recipeOutOfRecipes, ovenRequired, stoveRequired;
	JTextField tf, username, usernameSignUp, displayNameTF, question1TF, question2TF, question3TF, fquestion1TF,
			fquestion2TF, fquestion3TF, fUsername;
	JPasswordField password, passwordSignUp, currPasswordPF, newPasswordPF, confirmNewPasswordPF, fCurrPasswordPF,
			fNewPasswordPF, fConfirmNewPasswordPF;
	JCheckBox microwave, lime, apple, watermelon, pears, peaches, honeyDew, cantaloupe, lemon, avocado, lettuce, tomato, refriedBeans,
			beans, hashBrown, potato, corn, frozenBroccoli, celery, onion, cucumber, blackBeans, jalapenos, cabbage, coleslaw, V8Juice,
			greenPepper, radish, asparagus, carrot, cornstarch, bellPepper, spinach, frozenVegetables, redPepper, frozenCorn, kidneyBeans,
			cornmeal, zucchini, mushrooms, polenta, yellowPepper, taterTots, bread, tortilla, tortillaChips, englishMuffin,
			crackers, glassNoodles, flour, rice, breadCrumbs, penne, garlicBread, eggNoodles, spaghetti, macNCheese, turkey, ham, tuna, egg,
			bacon, meat, chicken, cashews, pistachios, prosciutto, shrimp, walnuts, peanutButter, pepporoni, frozenMeatballs, groundSausage,
			salmon, kielbasa, fishFillet, porkChops, chickenWings, cheese, butter, creamCheese, sourCream, pimientos, goatCheese, mozzarella,
			feta, milk, swiss, parmesan, mayo, dressing, mustard, salsa, bbqSauce, italianDressing, peachJam, honey, marinara, soySauce,
			enchiladaSauce, sweetSourSauce, tomatoSauce, spaghettiSauce, curryPowder, salt, garlic, paprika, italianSeasoning, basil, cumin,
			sugar, sesameSeed, cayennePepper, redPepperFlakes, chilePaste, cilantro, lemonPepper, chiliPowder, blackPepper, vinegar, oliveOil,
			limeJuice, lemonJuice, fishSauce, beefStock, bakingPowder, bakingSoda, chickenStock, vegetableOil, ranchDressingMix, pestoSauceMix,
			chilli, creamOfChicken, creamOfMushroom, strawberries, raspberries, blueberries, blackberries, yogurt, orange, spongeCake, whippedCream,
			almonds, oats, pecans, brownSugar, cinnamon, ginger, vanillaExtract, bisquickMix, twinkies, grahamCracker, strawberryJam, appliePieFilling,
			nutmeg, caramelSquares, cakeMix, searchAllRecipes, oven, stove;
	JComboBox<String> q1, q2, q3;
	Font logoFont = new Font("Comic Sans MS", Font.PLAIN, 48);
	Font timeFont = new Font("Comic Sans MS", Font.PLAIN, 32);
	boolean[] checked;
	boolean mbDisplay = false;
	boolean validLogin = false;
	boolean searchAllRecipesB = false;
	String checkedBox;
	String appliance[] = {"false","false","false"};
	String question1[] = { "What is your favorite book?", "What is your favorite movie?",
			"What is your favorite TV show?" };
	String question2[] = { "What is your favorite drink?", "What city were you born in?",
			"What is your favorite food?" };
	String question3[] = { "What is your mother's maiden name?", "What is your favorite color?",
			"What was your first pet's name?" };
	String[] ingredients;
	int currUser, currRecipe, fCurrUser, currDisplayRecipe, totalRecipes;
	ArrayList<String> displayNameLog = new ArrayList<String>();
	ArrayList<String> userLog = new ArrayList<String>();
	ArrayList<String> passLog = new ArrayList<String>();
	ArrayList<String> profilePicLog = new ArrayList<String>();
	ArrayList<String> displayColorLog = new ArrayList<String>();
	ArrayList<String> question1Log = new ArrayList<String>();
	ArrayList<String> question2Log = new ArrayList<String>();
	ArrayList<String> question3Log = new ArrayList<String>();
	ArrayList<String> answer1Log = new ArrayList<String>();
	ArrayList<String> answer2Log = new ArrayList<String>();
	ArrayList<String> answer3Log = new ArrayList<String>();
	static ArrayList<String> userIngredients = new ArrayList<String>();
	ArrayList<Recipe> validRecipes = new ArrayList<Recipe>();

	main() {
		f = new JFrame("MyBook");
		Image icon = Toolkit.getDefaultToolkit().getImage("src/images/MyBookLogo.png");
		f.setIconImage(icon);

		try {
			BufferedReader br = new BufferedReader(new FileReader("profiles.txt"));
			String contentLine = br.readLine();
			while (contentLine != null) {
				displayNameLog.add(contentLine);
				userLog.add(br.readLine());
				passLog.add(br.readLine());
				profilePicLog.add(br.readLine());
				displayColorLog.add(br.readLine());
				question1Log.add(br.readLine());
				question2Log.add(br.readLine());
				question3Log.add(br.readLine());
				answer1Log.add(br.readLine());
				answer2Log.add(br.readLine());
				answer3Log.add(br.readLine());
				contentLine = br.readLine();
			}
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		// Create Radio Buttons for Profile Picture Choices
		p0 = new JRadioButton("User");
		p0.setActionCommand("0");
		p0.setSelected(true);
		p1 = new JRadioButton("User 1");
		p1.setActionCommand("1");
		p2 = new JRadioButton("User 2");
		p2.setActionCommand("2");
		p3 = new JRadioButton("User 3");
		p3.setActionCommand("3");
		p4 = new JRadioButton("User 4");
		p4.setActionCommand("4");
		p5 = new JRadioButton("User 5");
		p5.setActionCommand("5");
		p6 = new JRadioButton("User 6");
		p6.setActionCommand("6");
		p7 = new JRadioButton("User 7");
		p7.setActionCommand("7");
		p8 = new JRadioButton("User 8");
		p8.setActionCommand("8");
		p9 = new JRadioButton("User 9");
		p9.setActionCommand("9");

		// Create Radio Buttons for Display Choices
		d0 = new JRadioButton("Orange");
		d0.setActionCommand("0");
		d0.setSelected(true);
		d1 = new JRadioButton("Red");
		d1.setActionCommand("1");
		d2 = new JRadioButton("Blue");
		d2.setActionCommand("2");
		d3 = new JRadioButton("Yellow");
		d3.setActionCommand("3");
		d4 = new JRadioButton("Green");
		d4.setActionCommand("4");
		d5 = new JRadioButton("Purple");
		d5.setActionCommand("5");
		d6 = new JRadioButton("Pink");
		d6.setActionCommand("6");
		d7 = new JRadioButton("Gray");
		d7.setActionCommand("7");
		d8 = new JRadioButton("White");
		d8.setActionCommand("8");
		d9 = new JRadioButton("Black");
		d9.setActionCommand("9");

		// Create ButtonGroup for Profile Radio Buttons
		ButtonGroup profiles = new ButtonGroup();
		profiles.add(p0);
		profiles.add(p1);
		profiles.add(p2);
		profiles.add(p3);
		profiles.add(p4);
		profiles.add(p5);
		profiles.add(p6);
		profiles.add(p7);
		profiles.add(p8);
		profiles.add(p9);
		p0.addActionListener(this);
		p1.addActionListener(this);
		p2.addActionListener(this);
		p3.addActionListener(this);
		p4.addActionListener(this);
		p5.addActionListener(this);
		p6.addActionListener(this);
		p7.addActionListener(this);
		p8.addActionListener(this);
		p9.addActionListener(this);

		// Create ButtonGroup for Display Radio Buttons
		ButtonGroup displays = new ButtonGroup();
		displays.add(d0);
		displays.add(d1);
		displays.add(d2);
		displays.add(d3);
		displays.add(d4);
		displays.add(d5);
		displays.add(d6);
		displays.add(d7);
		displays.add(d8);
		displays.add(d9);
		d0.addActionListener(this);
		d1.addActionListener(this);
		d2.addActionListener(this);
		d3.addActionListener(this);
		d4.addActionListener(this);
		d5.addActionListener(this);
		d6.addActionListener(this);
		d7.addActionListener(this);
		d8.addActionListener(this);
		d9.addActionListener(this);

		// Displaying Current Profile Picture
		profilePic = new JLabel();
		profilePic.setHorizontalAlignment(JLabel.CENTER);
		profilePic.setVerticalAlignment(JLabel.CENTER);
		profilePic.setVerticalTextPosition(JLabel.CENTER);
		profilePic.setHorizontalTextPosition(JLabel.CENTER);
		profilePic.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		profilePic.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0, 0, 10, 0),
				profilePic.getBorder()));
		profilePic.setIcon(new ImageIcon("src/images/Profile0.png"));
		profilePic.setText("");

		// Displaying Logo
		logo = new JLabel();
		logo.setHorizontalAlignment(JLabel.CENTER);
		logo.setVerticalAlignment(JLabel.CENTER);
		logo.setHorizontalTextPosition(JLabel.CENTER);
		logo.setVerticalTextPosition(JLabel.CENTER);
		logo.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		logo.setIcon(new ImageIcon("src/images/MyBookLogo.png"));
		logo.setText("");

		// Menu Bar
		JMenuBar mb = new JMenuBar();
		main = new JMenu("Main");
		profile = new JMenu("Profile");
		options = new JMenu("Options");
		home = new JMenuItem("Home");
		search = new JMenuItem("Search");
		favorites = new JMenuItem("Favorites");
		customize = new JMenuItem("Customize");
		changePassword = new JMenuItem("Change Password");
		changeDisplayColor = new JMenuItem("Change Display");
		logout = new JMenuItem("Logout");
		mb.add(main);
		mb.add(profile);
		mb.add(options);
		main.add(home);
		main.add(search);
		main.add(favorites);
		profile.add(customize);
		profile.add(changePassword);
		profile.add(changeDisplayColor);
		options.add(logout);
		mb.setVisible(true);
		f.setJMenuBar(mb);
		home.addActionListener(this);
		search.addActionListener(this);
		favorites.addActionListener(this);
		customize.addActionListener(this);
		changePassword.addActionListener(this);
		changeDisplayColor.addActionListener(this);
		logout.addActionListener(this);

		// Panels
		homeP = new JPanel();
		homeP.setBounds(0, 0, 900, 650);
		homeP.setBackground(Color.orange);
		homeP.setLayout(null);
		homeDisplayP = new JPanel();
		homeDisplayP.setBackground(Color.white);
		homeDisplayP.setLayout(null);
		loginP = new JPanel();
		loginP.setBounds(0, 0, 900, 650);
		loginP.setBackground(Color.orange);
		loginP.setLayout(null);
		loginButtonsP = new JPanel();
		signupP = new JPanel();
		signupP.setBounds(0, 0, 900, 650);
		signupP.setBackground(Color.orange);
		signupP.setLayout(null);
		signupButtonsP = new JPanel();
		securityP = new JPanel();
		securityP.setBounds(0, 0, 900, 650);
		securityP.setBackground(Color.orange);
		securityP.setLayout(null);
		securityQuestionsP = new JPanel();
		forgotPasswordP = new JPanel();
		forgotPasswordP.setBounds(0, 0, 900, 650);
		forgotPasswordP.setBackground(Color.orange);
		forgotPasswordP.setLayout(null);
		forgotPasswordQuestionsP = new JPanel();
		forgotPasswordUsernameP = new JPanel();
		forgotPasswordPasswordP = new JPanel();
		selectP = new JPanel();
		selectP.setBounds(0, 0, 900, 650);
		selectP.setBackground(Color.orange);
		selectP.setLayout(null);
		displayP = new JPanel();
		displayP.setBounds(0, 0, 900, 650);
		displayP.setBackground(Color.orange);
		displayP.setLayout(null);
		recipeTitleP = new JPanel();
		recipeDescriptionP = new JPanel();
		favoritesP = new JPanel();
		favoritesP.setBounds(0, 0, 900, 650);
		favoritesP.setBackground(Color.orange);
		favoritesP.setLayout(null);
		customizeP = new JPanel();
		customizeP.setBounds(0, 0, 900, 650);
		customizeP.setBackground(Color.orange);
		customizeP.setLayout(null);
		changeDisplayP = new JPanel();
		changeDisplayP.setBounds(0, 0, 900, 650);
		changeDisplayP.setBackground(Color.orange);
		changeDisplayP.setLayout(null);
		selectDisplayP = new JPanel();
		changePasswordP = new JPanel();
		changePasswordP.setBounds(0, 0, 900, 650);
		changePasswordP.setBackground(Color.orange);
		changePasswordP.setLayout(null);
		selectProfileP = new JPanel();
		displayProfileP = new JPanel();

		// Ingredients List
		checked = new boolean[156];
		ingredients = new String[] { "Lime","Apple","Watermelon","Pears","Peaches","Honeydew","Cantaloupe","Lemon",
				"Avocado","Lettuce","Tomato","Refried Beans","Beans","Hash Brown","Potato","Corn","Frozen Broccoli","Celery",
				"Onion","Cucumber","Black Beans","Jalapeno","Cabbage","Coleslaw","V8 Juice","Green Pepper",
				"Radish","Asparagus","Carrot","Cornstarch","Bell Pepper","Spinach","Frozen Vegetables","Red Pepper","Frozen Corn",
				"Kidney Beans","Cornmeal","Zucchini","Mushrooms","Polenta","Yellow Pepper","Tater Tots",
				"Bread","Tortilla","Tortilla Chips","English Muffin","Crackers","Glass Noodles","Flour","Rice","Bread Crumbs",
				"Penne","Garlic Bread","Egg Noodles","Spaghetti","Mac n Cheese","Turkey","Ham","Tuna","Eggs","Bacon","Meat",
				"Chicken","Cashews","Pistachios","Prosciutto","Shrimp","Walnuts","Peanut Butter","Pepperoni","Frozen Meatballs",
				"Ground Sausage","Salmon","Kielbasa","Fish Fillets","Pork Chops","Chicken Wings","Cheese","Butter","Cream Cheese",
				"Sour Cream","Pimientos","Goat Cheese","Mozzarella","Feta","Milk","Swiss","Parmesan","Mayo","Dressing","Mustard",
				"Salsa","BBQ Sauce","Italian Dressing","Peach Jam","Honey","Marinara","Soy Sauce","Enchilada Sauce","Sweet and Sour Sauce",
				"Tomato Sauce","Spaghetti Sauce","Curry Powder","Salt","Garlic","Paprika","Italian Seasoning","Basil","Cumin","Sugar",
				"Sesame Seed","Cayenne","Red Pepper Flakes","Chile Paste","Cilantro","Lemon Pepper","Chili Powder","Black Pepper",
				"Vinegar","Olive Oil","Lime Juice","Lemon Juice","Fish Sauce","Beef Stock","Baking Powder","Baking Soda","Chicken Stock",
				"Vegetable Oil","Ranch Dressing Mix","Pesto Sauce Mix","Chilli","Cream of Chicken","Cream of Mushroom","Strawberries",
				"Raspberries","Blueberries","Blackberries","Yogurt","Orange","Sponge Cake","Whipped Cream","Almonds","Oats","Pecans",
				"Brown Sugar","Cinnamon","Ginger","Vanilla Extract","Bisquick Mix","Twinkies","Graham Cracker","Strawberry Jam",
				"Apple Pie Filling","Nutmeg","Caramel Squares","Cake Mix"};
		lime = new JCheckBox("Lime");
		apple = new JCheckBox("Apple");
		watermelon = new JCheckBox("Watermelon");
		pears = new JCheckBox("Pears");
		peaches = new JCheckBox("Peaches");
		honeyDew = new JCheckBox("Honey Dew");
		cantaloupe = new JCheckBox("Cantaloupe");
		lemon = new JCheckBox("Lemon");
		avocado = new JCheckBox("Avocado");
		lettuce = new JCheckBox("Lettuce");
		tomato = new JCheckBox("Tomato");
		refriedBeans = new JCheckBox("Refried Beans");
		beans = new JCheckBox("Beans");
		hashBrown = new JCheckBox("Hash Brown");
		potato = new JCheckBox("Potato");
		corn = new JCheckBox("Corn");
		frozenBroccoli = new JCheckBox("Frozen Broccoli");
		celery = new JCheckBox("Celery");
		onion = new JCheckBox("Onion");
		cucumber = new JCheckBox("Cucumber");
		blackBeans = new JCheckBox("Black Beans");
		jalapenos = new JCheckBox("Jalapenos");
		cabbage = new JCheckBox("Cabbage");
		coleslaw = new JCheckBox("Coleslaw");
		V8Juice = new JCheckBox("V8 Juice");
		greenPepper = new JCheckBox("Green Pepper");
		radish = new JCheckBox("Radish");
		asparagus = new JCheckBox("Asparagus");
		carrot = new JCheckBox("Carrot");
		cornstarch = new JCheckBox("Cornstarch");
		bellPepper = new JCheckBox("Bell Pepper");
		spinach = new JCheckBox("Spinach");
		frozenVegetables = new JCheckBox("Frozen Vegetables");
		redPepper = new JCheckBox("Red Pepper");
		frozenCorn = new JCheckBox("Frozen Corn");
		kidneyBeans = new JCheckBox("Kidney Beans");
		cornmeal = new JCheckBox("Cornmeal");
		zucchini = new JCheckBox("Zucchini");
		mushrooms = new JCheckBox("Mushrooms");
		polenta = new JCheckBox("Polenta");
		yellowPepper = new JCheckBox("Yellow Pepper");
		creamOfMushroom = new JCheckBox("Cream of Mushroom");
		taterTots = new JCheckBox("Tater Tots");
		bread = new JCheckBox("Bread");
		tortilla = new JCheckBox("Tortilla");
		tortillaChips = new JCheckBox("Tortilla Chips");
		englishMuffin = new JCheckBox("English Muffin");
		crackers = new JCheckBox("Crackers");
		glassNoodles = new JCheckBox("Glass Noodles");
		flour = new JCheckBox("Flour");
		rice = new JCheckBox("Rice");
		breadCrumbs = new JCheckBox("Bread Crumbs");
		penne = new JCheckBox("Penne");
		garlicBread = new JCheckBox("Garlic Bread");
		eggNoodles = new JCheckBox("Egg Noodles");
		spaghetti = new JCheckBox("Spaghetti");
		macNCheese = new JCheckBox("Mac n' Cheese");
		turkey = new JCheckBox("Turkey");
		ham = new JCheckBox("Ham");
		tuna = new JCheckBox("Tuna");
		egg = new JCheckBox("Eggs");
		bacon = new JCheckBox("Bacon");
		meat = new JCheckBox("Meat");
		chicken = new JCheckBox("Chicken");
		cashews = new JCheckBox("Cashews");
		pistachios = new JCheckBox("Pistachios");
		prosciutto = new JCheckBox("Prosciutto");
		shrimp = new JCheckBox("Shrimp");
		walnuts = new JCheckBox("Walnuts");
		peanutButter = new JCheckBox("Peanut Butter");
		pepporoni = new JCheckBox("Pepporoni");
		frozenMeatballs = new JCheckBox("Frozen Meatballs");
		groundSausage = new JCheckBox("Ground Sausage");
		salmon = new JCheckBox("Salmon");
		kielbasa = new JCheckBox("Kielbasa");
		fishFillet = new JCheckBox("Fish Fillet");
		porkChops = new JCheckBox("Pork Chops");
		chickenWings = new JCheckBox("Chicken Wings");
		cheese = new JCheckBox("Cheese");
		butter = new JCheckBox("Butter");
		creamCheese = new JCheckBox("Cream Cheese");
		sourCream = new JCheckBox("Sour Cream");
		pimientos = new JCheckBox("Pimientos");
		goatCheese = new JCheckBox("Goat Cheese");
		mozzarella = new JCheckBox("Mozzarella");
		feta = new JCheckBox("Feta");
		milk = new JCheckBox("Milk");
		swiss = new JCheckBox("Swiss");
		parmesan = new JCheckBox("Parmesan");
		mayo = new JCheckBox("Mayo");
		dressing = new JCheckBox("Dressing");
		mustard = new JCheckBox("Mustard");
		salsa = new JCheckBox("Salsa");
		bbqSauce = new JCheckBox("BBQ Sauce");
		italianDressing = new JCheckBox("Italian Dressing");
		peachJam = new JCheckBox("Peach Jam");
		honey = new JCheckBox("Honey");
		marinara = new JCheckBox("Marinara");
		soySauce = new JCheckBox("Soy Sauce");
		enchiladaSauce = new JCheckBox("Enchilada Sauce");
		sweetSourSauce = new JCheckBox("Sweet & Sour Sauce");
		curryPowder = new JCheckBox("Curry Powder");
		salt = new JCheckBox("Salt");
		garlic = new JCheckBox("Garlic");
		paprika = new JCheckBox("Paprika");
		italianSeasoning = new JCheckBox("Italian Seasoning");
		basil = new JCheckBox("Basil");
		cumin = new JCheckBox("Cumin");
		sugar = new JCheckBox("Sugar");
		sesameSeed = new JCheckBox("Sesame Seed");
		cayennePepper = new JCheckBox("Cayenne Pepper");
		redPepperFlakes = new JCheckBox("Red Pepper Flakes");
		chilePaste = new JCheckBox("Chile Paste");
		blackPepper = new JCheckBox("Black Pepper");
		vinegar = new JCheckBox("Vinegar");
		oliveOil = new JCheckBox("Olive Oil");
		limeJuice = new JCheckBox("Lime Juice");
		lemonJuice = new JCheckBox("Lemon Juice");
		fishSauce = new JCheckBox("Fish Sauce");
		beefStock = new JCheckBox("Beef Stock");
		bakingPowder = new JCheckBox("Baking Powder");
		bakingSoda = new JCheckBox("Baking Soda");
		chickenStock = new JCheckBox("Chicken Stock");
		vegetableOil = new JCheckBox("Vegetable Oil");
		ranchDressingMix = new JCheckBox("Ranch Dressing Mix");
		pestoSauceMix = new JCheckBox("Pesto Sauce Mix");
		chilli = new JCheckBox("Chilli");
		creamOfChicken = new JCheckBox("Cream of Chicken");
		tomatoSauce = new JCheckBox("Tomato Sauce");
		spaghettiSauce = new JCheckBox("Spaghetti Sauce");
		cilantro = new JCheckBox("Cilantro");
		chiliPowder = new JCheckBox("Chili Powder");
		lemonPepper = new JCheckBox("Lemon Pepper");
		strawberries = new JCheckBox("Strawberries");
		raspberries = new JCheckBox("Raspberries");
		blueberries = new JCheckBox("Blueberries");
		blackberries = new JCheckBox("Blackberries");
		yogurt = new JCheckBox("Yogurt");
		orange = new JCheckBox("Orange");
		spongeCake = new JCheckBox("Sponge Cake");
		whippedCream = new JCheckBox("Whipped Cream");
		almonds = new JCheckBox("Almonds");
		oats = new JCheckBox("Oats");
		pecans = new JCheckBox("Pecans");
		brownSugar = new JCheckBox("Brown Sugar");
		cinnamon = new JCheckBox("Cinnamon");
		ginger = new JCheckBox("Ginger");
		vanillaExtract = new JCheckBox("Vanilla Extract");
		bisquickMix = new JCheckBox("Bisquick Mix");
		twinkies = new JCheckBox("Twinkies");
		grahamCracker = new JCheckBox("Graham Cracker");
		strawberryJam = new JCheckBox("Strawberry Jam");
		appliePieFilling = new JCheckBox("Apple Pie Filling");
		nutmeg = new JCheckBox("Nutmeg");
		caramelSquares = new JCheckBox("Caramel Squares");
		cakeMix = new JCheckBox("Cake Mix");

		// Search All Recipes
		searchAllRecipes = new JCheckBox("Include Recipes w/o All My Ingredients");
		searchAllRecipes.setBounds(320, 427, 255, 15);

		// Time
		l1 = new JLabel("Time:");
		l2 = new JLabel(); // Results of time input
		selected = new JLabel(); // Results of selected ingredients
		l1.setBounds(375, 415, 500, 200);
		tf = new JTextField();
		tf.setBounds(420, 507, 50, 20);

		// Appliances
		microwave = new JCheckBox("Microwave");
		microwave.setBounds(140, 487, 90, 15);
		oven = new JCheckBox("Oven");
		oven.setBounds(140, 507, 90, 15);
		stove = new JCheckBox("Stove");
		stove.setBounds(140, 527, 90, 15);

		// Search/Enter Button
		b = new JButton("Search");
		b.setBounds(600, 500, 80, 30);
		b.setBackground(Color.green);
		b.addActionListener(this);
		
		// Clear All Button
		clearAll = new JButton("Clear All");
		clearAll.setBounds(375, 375, 120, 30);
		clearAll.setBackground(Color.white);
		clearAll.addActionListener(this);
		
		// Tabbed Fruits Panel
		fruitsP = new JPanel();
		fruitsP.add(lime);
		fruitsP.add(apple);
		fruitsP.add(watermelon);
		fruitsP.add(pears);
		fruitsP.add(peaches);
		fruitsP.add(honeyDew);
		fruitsP.add(cantaloupe);
		fruitsP.add(lemon);
		fruitsP.add(strawberries);
		fruitsP.add(raspberries);
		fruitsP.add(blueberries);
		fruitsP.add(blackberries);
		fruitsP.add(orange);
		
		// Tabbed Vegetables Panel
		vegetablesP = new JPanel();
		vegetablesP.add(beans);
		vegetablesP.add(avocado);
		vegetablesP.add(lettuce);
		vegetablesP.add(tomato);
		vegetablesP.add(refriedBeans);
		vegetablesP.add(hashBrown);
		vegetablesP.add(potato);
		vegetablesP.add(corn);
		vegetablesP.add(frozenBroccoli);
		vegetablesP.add(celery);
		vegetablesP.add(onion);
		vegetablesP.add(cucumber);
		vegetablesP.add(blackBeans);
		vegetablesP.add(jalapenos);
		vegetablesP.add(cabbage);
		vegetablesP.add(coleslaw);
		vegetablesP.add(V8Juice);
		vegetablesP.add(greenPepper);
		vegetablesP.add(radish);
		vegetablesP.add(asparagus);
		vegetablesP.add(carrot);
		vegetablesP.add(cornstarch);
		vegetablesP.add(bellPepper);
		vegetablesP.add(spinach);
		vegetablesP.add(frozenVegetables);
		vegetablesP.add(redPepper);
		vegetablesP.add(frozenCorn);
		vegetablesP.add(kidneyBeans);
		vegetablesP.add(cornmeal);
		vegetablesP.add(zucchini);
		vegetablesP.add(mushrooms);
		vegetablesP.add(polenta);
		vegetablesP.add(yellowPepper);
		vegetablesP.add(taterTots);
		
		// Tabbed Grains Panel
		grainsP = new JPanel();
		grainsP.add(bread);
		grainsP.add(tortilla);
		grainsP.add(tortillaChips);
		grainsP.add(englishMuffin);
		grainsP.add(crackers);
		grainsP.add(glassNoodles);
		grainsP.add(flour);
		grainsP.add(rice);
		grainsP.add(breadCrumbs);
		grainsP.add(penne);
		grainsP.add(garlicBread);
		grainsP.add(eggNoodles);
		grainsP.add(spaghetti);
		grainsP.add(macNCheese);
		grainsP.add(spongeCake);
		grainsP.add(oats);
		grainsP.add(grahamCracker);
		
		// Tabbed Proteins Panel
		proteinsP = new JPanel();
		proteinsP.add(turkey);
		proteinsP.add(ham);
		proteinsP.add(tuna);
		proteinsP.add(egg);
		proteinsP.add(bacon);
		proteinsP.add(meat);
		proteinsP.add(chicken);
		proteinsP.add(cashews);
		proteinsP.add(pistachios);
		proteinsP.add(prosciutto);
		proteinsP.add(shrimp);
		proteinsP.add(walnuts);
		proteinsP.add(peanutButter);
		proteinsP.add(pepporoni);
		proteinsP.add(frozenMeatballs);
		proteinsP.add(groundSausage);
		proteinsP.add(salmon);
		proteinsP.add(kielbasa);
		proteinsP.add(fishFillet);
		proteinsP.add(porkChops);
		proteinsP.add(chickenWings);
		proteinsP.add(almonds);
		proteinsP.add(pecans);
		
		// Tabbed Dairys Panel
		dairysP = new JPanel();
		dairysP.add(cheese);
		dairysP.add(butter);
		dairysP.add(creamCheese);
		dairysP.add(sourCream);
		dairysP.add(pimientos);
		dairysP.add(goatCheese);
		dairysP.add(mozzarella);
		dairysP.add(feta);
		dairysP.add(swiss);
		dairysP.add(parmesan);
		dairysP.add(yogurt);
		dairysP.add(whippedCream);
		
		// Tabbed Condiments Panel
		condimentsP = new JPanel();
		condimentsP.add(mayo);
		condimentsP.add(dressing);
		condimentsP.add(mustard);
		condimentsP.add(salsa);
		condimentsP.add(bbqSauce);
		condimentsP.add(italianDressing);
		condimentsP.add(peachJam);
		condimentsP.add(honey);
		condimentsP.add(marinara);
		condimentsP.add(soySauce);
		condimentsP.add(enchiladaSauce);
		condimentsP.add(sweetSourSauce);
		condimentsP.add(tomatoSauce);
		condimentsP.add(spaghettiSauce);
		condimentsP.add(strawberryJam);
		
		// Tabbed Seasonings Panel
		seasoningsP = new JPanel();
		seasoningsP.add(curryPowder);
		seasoningsP.add(salt);
		seasoningsP.add(garlic);
		seasoningsP.add(paprika);
		seasoningsP.add(italianSeasoning);
		seasoningsP.add(basil);
		seasoningsP.add(cumin);
		seasoningsP.add(sugar);
		seasoningsP.add(sesameSeed);
		seasoningsP.add(cayennePepper);
		seasoningsP.add(redPepperFlakes);
		seasoningsP.add(chilePaste);
		seasoningsP.add(cilantro);
		seasoningsP.add(lemonPepper);
		seasoningsP.add(chiliPowder);
		seasoningsP.add(blackPepper);
		seasoningsP.add(brownSugar);
		seasoningsP.add(cinnamon);
		seasoningsP.add(ginger);
		seasoningsP.add(nutmeg);
		
		// Tabbed Miscellaneous Panel
		miscP = new JPanel();
		miscP.add(vinegar);
		miscP.add(oliveOil);
		miscP.add(limeJuice);
		miscP.add(lemonJuice);
		miscP.add(fishSauce);
		miscP.add(beefStock);
		miscP.add(bakingPowder);
		miscP.add(bakingSoda);
		miscP.add(chickenStock);
		miscP.add(vegetableOil);
		miscP.add(ranchDressingMix);
		miscP.add(pestoSauceMix);
		miscP.add(chilli);
		miscP.add(creamOfMushroom);
		miscP.add(creamOfChicken);
		miscP.add(vanillaExtract);
		miscP.add(bisquickMix);
		miscP.add(twinkies);
		miscP.add(appliePieFilling);
		miscP.add(caramelSquares);
		miscP.add(cakeMix);
		
		// Tabbed Ingredients Panel
		tabbedIngredients = new JTabbedPane();
		tabbedIngredients.add("Fruits",fruitsP);
		tabbedIngredients.add("Vegetables",vegetablesP);
		tabbedIngredients.add("Grains",grainsP);
		tabbedIngredients.add("Proteins",proteinsP);
		tabbedIngredients.add("Dairys",dairysP);
		tabbedIngredients.add("Condiments",condimentsP);
		tabbedIngredients.add("Seasonings",seasoningsP);
		tabbedIngredients.add("Misc.",miscP);
		tabbedIngredients.setVisible(true);
		tabbedIngredients.setBounds(100, 50, 700, 300);

		// Panel Login
		login = new JButton("Login");
		login.setBounds(135, 280, 140, 30);
		login.setBackground(Color.white);
		login.addActionListener(this);
		loginButtonsP.add(login);
		signup = new JButton("Sign Up");
		signup.setBounds(135, 320, 140, 30);
		signup.setBackground(Color.white);
		signup.addActionListener(this);
		loginButtonsP.add(signup);
		forgotPassword = new JButton("Forgot Password");
		forgotPassword.setBounds(135, 360, 140, 30);
		forgotPassword.setBackground(Color.white);
		forgotPassword.addActionListener(this);
		loginButtonsP.add(forgotPassword);
		username = new JTextField("");
		username.setBounds(105, 130, 200, 30);
		user = new JLabel("Username:");
		user.setBounds(105, 100, 80, 30);
		loginButtonsP.add(username);
		loginButtonsP.add(user);
		password = new JPasswordField();
		password.setBounds(105, 210, 200, 30);
		pass = new JLabel("Password:");
		pass.setBounds(105, 180, 80, 30);
		loginButtonsP.add(password);
		loginButtonsP.add(pass);
		loginButtonsP.setBounds(250, 100, 400, 400);
		loginButtonsP.setLayout(null);
		logo.setBounds(300, 20, 50, 50);
		logoName = new JLabel("MyBook");
		logoName.setFont(logoFont);
		logoName.setBounds(370, 10, 450, 70);
		loginP.add(logoName);
		loginP.add(logo);
		loginP.add(loginButtonsP);
		loginP.setVisible(true);

		// Panel Signup
		createAccount = new JButton("Create Account");
		createAccount.setBounds(130, 280, 150, 30);
		createAccount.setBackground(Color.white);
		createAccount.addActionListener(this);
		back = new JButton("Back");
		back.setBounds(165, 330, 80, 30);
		back.setBackground(Color.white);
		back.addActionListener(this);
		signupButtonsP.add(back);
		signupButtonsP.add(createAccount);
		usernameSignUp = new JTextField("");
		usernameSignUp.setBounds(105, 130, 200, 30);
		user = new JLabel("Username:");
		user.setBounds(105, 100, 80, 30);
		signupButtonsP.add(usernameSignUp);
		signupButtonsP.add(user);
		passwordSignUp = new JPasswordField();
		passwordSignUp.setBounds(105, 210, 200, 30);
		pass = new JLabel("Password:");
		pass.setBounds(105, 180, 80, 30);
		displayName = new JLabel("Display Name:");
		displayName.setBounds(105, 20, 120, 30);
		displayNameTF = new JTextField("");
		displayNameTF.setBounds(105, 50, 200, 30);
		signupButtonsP.add(displayName);
		signupButtonsP.add(displayNameTF);
		signupButtonsP.add(passwordSignUp);
		signupButtonsP.add(pass);
		signupButtonsP.setBounds(250, 100, 400, 400);
		signupButtonsP.setLayout(null);
		signupP.add(signupButtonsP);
		signupP.setVisible(false);

		// Panel Security Questions
		question1TF = new JTextField("");
		question1TF.setBounds(105, 85, 200, 30);
		q1 = new JComboBox(question1);
		q1.setBounds(105, 50, 200, 30);
		question2TF = new JTextField("");
		question2TF.setBounds(105, 165, 200, 30);
		q2 = new JComboBox(question2);
		q2.setBounds(105, 130, 200, 30);
		question3TF = new JTextField("");
		question3TF.setBounds(105, 245, 200, 30);
		q3 = new JComboBox(question3);
		q3.setBounds(105, 210, 200, 30);
		submitAnswers = new JButton("Submit Answers");
		submitAnswers.setBounds(130, 300, 150, 30);
		submitAnswers.setBackground(Color.white);
		submitAnswers.addActionListener(this);
		securityQuestionsP.add(question1TF);
		securityQuestionsP.add(question2TF);
		securityQuestionsP.add(question3TF);
		securityQuestionsP.add(q1);
		securityQuestionsP.add(q2);
		securityQuestionsP.add(q3);
		securityQuestionsP.add(submitAnswers);
		securityQuestionsP.setLayout(null);
		securityQuestionsP.setBounds(250, 100, 400, 400);
		securityP.add(securityQuestionsP);
		securityP.setVisible(false);

		// Panel Forgot Password
		fquestion1TF = new JTextField("");
		fquestion1TF.setBounds(105, 85, 200, 30);
		fquestion2TF = new JTextField("");
		fquestion2TF.setBounds(105, 165, 200, 30);
		fquestion3TF = new JTextField("");
		fquestion3TF.setBounds(105, 245, 200, 30);
		fquestion1 = new JLabel();
		fquestion1.setBounds(105, 55, 400, 30);
		fquestion2 = new JLabel();
		fquestion2.setBounds(105, 135, 400, 30);
		fquestion3 = new JLabel();
		fquestion3.setBounds(105, 215, 400, 30);
		fUsername = new JTextField("");
		fUsername.setBounds(105, 180, 200, 30);
		fUser = new JLabel("Username:");
		fUser.setBounds(105, 150, 80, 30);
		submitUser = new JButton("Confirm Username");
		submitUser.setBounds(125, 250, 160, 30);
		submitUser.setBackground(Color.white);
		submitUser.addActionListener(this);
		answerQuestions = new JButton("Submit");
		answerQuestions.setBounds(165, 320, 80, 30);
		answerQuestions.setBackground(Color.white);
		answerQuestions.addActionListener(this);
		fCurrPassword = new JLabel("Current Password:");
		fCurrPassword.setBounds(105, 55, 200, 30);
		fNewPassword = new JLabel("New Password:");
		fNewPassword.setBounds(105, 135, 200, 30);
		fConfirmNewPassword = new JLabel("Confirm New Password:");
		fConfirmNewPassword.setBounds(105, 215, 200, 30);
		fCurrPasswordPF = new JPasswordField();
		fCurrPasswordPF.setBounds(105, 85, 200, 30);
		fNewPasswordPF = new JPasswordField();
		fNewPasswordPF.setBounds(105, 165, 200, 30);
		fConfirmNewPasswordPF = new JPasswordField();
		fConfirmNewPasswordPF.setBounds(105, 245, 200, 30);
		fChangePasswordB = new JButton("Change Password");
		fChangePasswordB.setBounds(135, 300, 150, 30);
		fChangePasswordB.setBackground(Color.white);
		fChangePasswordB.addActionListener(this);
		forgotPasswordPasswordP.add(fCurrPassword);
		forgotPasswordPasswordP.add(fNewPassword);
		forgotPasswordPasswordP.add(fConfirmNewPassword);
		forgotPasswordPasswordP.add(fCurrPasswordPF);
		forgotPasswordPasswordP.add(fNewPasswordPF);
		forgotPasswordPasswordP.add(fConfirmNewPasswordPF);
		forgotPasswordPasswordP.add(fChangePasswordB);
		forgotPasswordPasswordP.setLayout(null);
		forgotPasswordPasswordP.setBounds(250, 100, 400, 400);
		forgotPasswordPasswordP.setVisible(false);
		forgotPasswordP.add(forgotPasswordPasswordP);
		forgotPasswordQuestionsP.add(answerQuestions);
		forgotPasswordUsernameP.add(submitUser);
		forgotPasswordUsernameP.add(fUsername);
		forgotPasswordUsernameP.add(fUser);
		forgotPasswordUsernameP.setLayout(null);
		forgotPasswordUsernameP.setBounds(250, 100, 400, 400);
		forgotPasswordP.add(forgotPasswordUsernameP);
		forgotPasswordQuestionsP.add(fquestion1TF);
		forgotPasswordQuestionsP.add(fquestion2TF);
		forgotPasswordQuestionsP.add(fquestion3TF);
		forgotPasswordQuestionsP.add(fquestion1);
		forgotPasswordQuestionsP.add(fquestion2);
		forgotPasswordQuestionsP.add(fquestion3);
		forgotPasswordQuestionsP.setLayout(null);
		forgotPasswordQuestionsP.setBounds(250, 100, 400, 400);
		forgotPasswordQuestionsP.setVisible(false);
		forgotPasswordP.add(forgotPasswordQuestionsP);
		forgotPasswordP.setVisible(false);

		// Panel Home
		mbhelp = new JLabel("Press any of these buttons up here to navigate between tabs!");
		mbhelp.setBounds(10, 10, 400, 30);
		homeButtons = new JLabel("Or press a button down here to get started!");
		homeButtons.setBounds(220, 200, 300, 30);
		homeSearch = new JButton("Search Recipes");
		homeSearch.setBounds(10, 300, 200, 60);
		homeSearch.addActionListener(this);
		homeFavorites = new JButton("Favorite Recipes");
		homeFavorites.setBounds(240, 300, 200, 60);
		homeFavorites.addActionListener(this);
		homeCustomize = new JButton("Customize Profile");
		homeCustomize.setBounds(460, 300, 200, 60);
		homeCustomize.addActionListener(this);
		homeDisplayP.add(homeSearch);
		homeDisplayP.add(homeFavorites);
		homeDisplayP.add(homeCustomize);
		homeP.add(mbhelp);
		homeDisplayP.add(homeButtons);
		homeDisplayP.setBounds(100, 100, 675, 400);
		homeP.add(homeDisplayP);
		homeP.setVisible(false);

		// Panel Select
		selectP.add(b);
		selectP.add(clearAll);
		selectP.add(microwave);
		selectP.add(oven);
		selectP.add(stove);
		selectP.add(l1);
		selectP.add(tf);
		selectP.add(searchAllRecipes);
		selectP.add(tabbedIngredients);
		selectP.setVisible(false);

		// Panel Display
		recipeOutOfRecipes = new JLabel();
		recipeOutOfRecipes.setBounds(430, 160, 200, 30);
		recipeTitleP.setBounds(115, 10, 650, 150);
		recipeTitleP.setLayout(null);
		recipeDescriptionP.setBounds(115, 200, 650, 400);
		recipeDescriptionP.setLayout(null);
		recipeTitle = new JLabel();
		recipeTitle.setBounds(20, 20, 450, 30);
		recipeTime = new JLabel();
		recipeTime.setBounds(20, 100, 200, 30);
		recipeLink = new JLabel();
		recipeLink.setBounds(20, 180, 900, 30);
		recipeIngredientList = new JLabel();
		recipeIngredientList.setBounds(20, 260, 900, 30);
		microwaveRequired = new JLabel();
		ovenRequired = new JLabel();
		stoveRequired = new JLabel();
		nextRecipe = new JButton(">");
		nextRecipe.setBounds(795, 300, 80, 80);
		nextRecipe.setBackground(Color.gray);
		nextRecipe.addActionListener(this);
		previousRecipe = new JButton("<");
		previousRecipe.setBounds(10, 300, 80, 80);
		previousRecipe.setBackground(Color.gray);
		previousRecipe.addActionListener(this);
		displayP.add(recipeOutOfRecipes);
		displayP.add(nextRecipe);
		displayP.add(previousRecipe);
		l2.setBounds(10, 40, 900, 30);
		selected.setBounds(10, 20, 900, 30);
		microwaveRequired.setBounds(10, 60, 200, 30);
		ovenRequired.setBounds(10,80,200,30);
		stoveRequired.setBounds(10,100,200,30);
		displayP.add(recipeTitleP);
		displayP.add(recipeDescriptionP);
		recipeTitleP.add(selected);
		recipeTitleP.add(l2);
		recipeTitleP.add(microwaveRequired);
		recipeTitleP.add(ovenRequired);
		recipeTitleP.add(stoveRequired);
		recipeDescriptionP.add(recipeTitle);
		recipeDescriptionP.add(recipeTime);
		recipeDescriptionP.add(recipeLink);
		recipeDescriptionP.add(recipeIngredientList);
		displayP.setVisible(false);

		// Panel Favorites
		favoritesP.setVisible(false);

		// Panel Customize
		customizeP.setVisible(false);
		customizeP.setLayout(new BoxLayout(customizeP, BoxLayout.PAGE_AXIS));
		customizeP.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		selectProfileP.setLayout(new BoxLayout(selectProfileP, BoxLayout.PAGE_AXIS));
		selectProfileP.setAlignmentX(Component.CENTER_ALIGNMENT);
		selectProfileP.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Select User"),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		displayProfileP.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Current User"),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		displayProfileP.add(profilePic);
		selectProfileP.add(p0);
		selectProfileP.add(p1);
		selectProfileP.add(p2);
		selectProfileP.add(p3);
		selectProfileP.add(p4);
		selectProfileP.add(p5);
		selectProfileP.add(p6);
		selectProfileP.add(p7);
		selectProfileP.add(p8);
		selectProfileP.add(p9);
		customizeP.add(selectProfileP);
		customizeP.add(displayProfileP);

		// Panel Change Display
		changeDisplayP.setVisible(false);
		changeDisplayP.setLayout(new BoxLayout(changeDisplayP, BoxLayout.PAGE_AXIS));
		changeDisplayP.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		selectDisplayP.setLayout(new BoxLayout(selectDisplayP, BoxLayout.PAGE_AXIS));
		selectDisplayP.setAlignmentX(Component.CENTER_ALIGNMENT);
		selectDisplayP.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Select Display"),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		selectDisplayP.add(d0);
		selectDisplayP.add(d1);
		selectDisplayP.add(d2);
		selectDisplayP.add(d3);
		selectDisplayP.add(d4);
		selectDisplayP.add(d5);
		selectDisplayP.add(d6);
		selectDisplayP.add(d7);
		selectDisplayP.add(d8);
		selectDisplayP.add(d9);
		changeDisplayP.add(selectDisplayP);

		// Panel Change Password
		currPassword = new JLabel("Current Password:");
		currPassword.setBounds(350, 140, 200, 30);
		newPassword = new JLabel("New Password:");
		newPassword.setBounds(350, 220, 200, 30);
		confirmNewPassword = new JLabel("Confirm New Password:");
		confirmNewPassword.setBounds(350, 300, 200, 30);
		currPasswordPF = new JPasswordField();
		currPasswordPF.setBounds(350, 170, 200, 30);
		newPasswordPF = new JPasswordField();
		newPasswordPF.setBounds(350, 250, 200, 30);
		confirmNewPasswordPF = new JPasswordField();
		confirmNewPasswordPF.setBounds(350, 330, 200, 30);
		changePasswordB = new JButton("Change Password");
		changePasswordB.setBounds(375, 400, 150, 30);
		changePasswordB.setBackground(Color.white);
		changePasswordB.addActionListener(this);
		changePasswordP.add(currPassword);
		changePasswordP.add(newPassword);
		changePasswordP.add(confirmNewPassword);
		changePasswordP.add(currPasswordPF);
		changePasswordP.add(newPasswordPF);
		changePasswordP.add(confirmNewPasswordPF);
		changePasswordP.add(changePasswordB);
		changePasswordP.setVisible(false);

		// JFrame
		f.add(loginP);
		f.add(signupP);
		f.add(homeP);
		f.add(selectP);
		f.add(displayP);
		f.add(favoritesP);
		f.add(customizeP);
		f.add(changeDisplayP);
		f.add(changePasswordP);
		f.add(securityP);
		f.add(forgotPasswordP);

		// Buttons Selected
		microwave.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				appliance[0] = (e.getStateChange() == 1 ? "true" : "false");
			}
		});
		oven.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				appliance[1] = (e.getStateChange() == 1 ? "true" : "false");
			}
		});
		stove.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				appliance[2] = (e.getStateChange() == 1 ? "true" : "false");
			}
		});
		searchAllRecipes.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				searchAllRecipesB = (e.getStateChange() == 1 ? true : false);
			}
		});
		lime.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[0] = (e.getStateChange() == 1 ? true : false);
			}
		});
		apple.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[1] = (e.getStateChange() == 1 ? true : false);
			}
		});
		watermelon.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[2] = (e.getStateChange() == 1 ? true : false);
			}
		});
		pears.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[3] = (e.getStateChange() == 1 ? true : false);
			}
		});
		peaches.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[4] = (e.getStateChange() == 1 ? true : false);
			}
		});
		honeyDew.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[5] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cantaloupe.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[6] = (e.getStateChange() == 1 ? true : false);
			}
		});
		lemon.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[7] = (e.getStateChange() == 1 ? true : false);
			}
		});
		avocado.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[8] = (e.getStateChange() == 1 ? true : false);
			}
		});
		lettuce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[9] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tomato.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[10] = (e.getStateChange() == 1 ? true : false);
			}
		});
		refriedBeans.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[11] = (e.getStateChange() == 1 ? true : false);
			}
		});
		beans.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[12] = (e.getStateChange() == 1 ? true : false);
			}
		});
		hashBrown.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[13] = (e.getStateChange() == 1 ? true : false);
			}
		});
		potato.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[14] = (e.getStateChange() == 1 ? true : false);
			}
		});
		corn.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[15] = (e.getStateChange() == 1 ? true : false);
			}
		});
		frozenBroccoli.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[16] = (e.getStateChange() == 1 ? true : false);
			}
		});
		celery.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[17] = (e.getStateChange() == 1 ? true : false);
			}
		});
		onion.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[18] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cucumber.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[19] = (e.getStateChange() == 1 ? true : false);
			}
		});
		blackBeans.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[20] = (e.getStateChange() == 1 ? true : false);
			}
		});
		jalapenos.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[21] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cabbage.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[22] = (e.getStateChange() == 1 ? true : false);
			}
		});
		coleslaw.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[23] = (e.getStateChange() == 1 ? true : false);
			}
		});
		V8Juice.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[24] = (e.getStateChange() == 1 ? true : false);
			}
		});
		greenPepper.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[25] = (e.getStateChange() == 1 ? true : false);
			}
		});
		radish.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[26] = (e.getStateChange() == 1 ? true : false);
			}
		});
		asparagus.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[27] = (e.getStateChange() == 1 ? true : false);
			}
		});
		carrot.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[28] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cornstarch.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[29] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bellPepper.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[30] = (e.getStateChange() == 1 ? true : false);
			}
		});
		spinach.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[31] = (e.getStateChange() == 1 ? true : false);
			}
		});
		frozenVegetables.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[32] = (e.getStateChange() == 1 ? true : false);
			}
		});
		redPepper.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[33] = (e.getStateChange() == 1 ? true : false);
			}
		});
		frozenCorn.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[34] = (e.getStateChange() == 1 ? true : false);
			}
		});
		kidneyBeans.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[35] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cornmeal.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[36] = (e.getStateChange() == 1 ? true : false);
			}
		});
		zucchini.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[37] = (e.getStateChange() == 1 ? true : false);
			}
		});
		mushrooms.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[38] = (e.getStateChange() == 1 ? true : false);
			}
		});
		polenta.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[39] = (e.getStateChange() == 1 ? true : false);
			}
		});
		yellowPepper.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[40] = (e.getStateChange() == 1 ? true : false);
			}
		});
		taterTots.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[41] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bread.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[42] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tortilla.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[43] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tortillaChips.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[44] = (e.getStateChange() == 1 ? true : false);
			}
		});
		englishMuffin.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[45] = (e.getStateChange() == 1 ? true : false);
			}
		});
		crackers.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[46] = (e.getStateChange() == 1 ? true : false);
			}
		});
		glassNoodles.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[47] = (e.getStateChange() == 1 ? true : false);
			}
		});
		flour.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[48] = (e.getStateChange() == 1 ? true : false);
			}
		});
		rice.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[49] = (e.getStateChange() == 1 ? true : false);
			}
		});
		breadCrumbs.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[50] = (e.getStateChange() == 1 ? true : false);
			}
		});
		penne.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[51] = (e.getStateChange() == 1 ? true : false);
			}
		});
		garlicBread.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[52] = (e.getStateChange() == 1 ? true : false);
			}
		});
		eggNoodles.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[53] = (e.getStateChange() == 1 ? true : false);
			}
		});
		spaghetti.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[54] = (e.getStateChange() == 1 ? true : false);
			}
		});
		macNCheese.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[55] = (e.getStateChange() == 1 ? true : false);
			}
		});
		turkey.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[56] = (e.getStateChange() == 1 ? true : false);
			}
		});
		ham.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[57] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tuna.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[58] = (e.getStateChange() == 1 ? true : false);
			}
		});
		egg.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[59] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bacon.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[60] = (e.getStateChange() == 1 ? true : false);
			}
		});
		meat.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[61] = (e.getStateChange() == 1 ? true : false);
			}
		});
		chicken.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[62] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cashews.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[63] = (e.getStateChange() == 1 ? true : false);
			}
		});
		pistachios.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[64] = (e.getStateChange() == 1 ? true : false);
			}
		});
		prosciutto.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[65] = (e.getStateChange() == 1 ? true : false);
			}
		});
		shrimp.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[66] = (e.getStateChange() == 1 ? true : false);
			}
		});
		walnuts.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[67] = (e.getStateChange() == 1 ? true : false);
			}
		});
		peanutButter.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[68] = (e.getStateChange() == 1 ? true : false);
			}
		});
		pepporoni.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[69] = (e.getStateChange() == 1 ? true : false);
			}
		});
		frozenMeatballs.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[70] = (e.getStateChange() == 1 ? true : false);
			}
		});
		groundSausage.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[71] = (e.getStateChange() == 1 ? true : false);
			}
		});
		salmon.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[72] = (e.getStateChange() == 1 ? true : false);
			}
		});
		kielbasa.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[73] = (e.getStateChange() == 1 ? true : false);
			}
		});
		fishFillet.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[74] = (e.getStateChange() == 1 ? true : false);
			}
		});
		porkChops.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[75] = (e.getStateChange() == 1 ? true : false);
			}
		});
		chickenWings.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[76] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cheese.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[77] = (e.getStateChange() == 1 ? true : false);
			}
		});
		butter.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[78] = (e.getStateChange() == 1 ? true : false);
			}
		});
		creamCheese.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[79] = (e.getStateChange() == 1 ? true : false);
			}
		});
		sourCream.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[80] = (e.getStateChange() == 1 ? true : false);
			}
		});
		pimientos.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[81] = (e.getStateChange() == 1 ? true : false);
			}
		});
		goatCheese.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[82] = (e.getStateChange() == 1 ? true : false);
			}
		});
		mozzarella.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[83] = (e.getStateChange() == 1 ? true : false);
			}
		});
		feta.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[84] = (e.getStateChange() == 1 ? true : false);
			}
		});
		milk.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[85] = (e.getStateChange() == 1 ? true : false);
			}
		});
		swiss.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[86] = (e.getStateChange() == 1 ? true : false);
			}
		});
		parmesan.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[87] = (e.getStateChange() == 1 ? true : false);
			}
		});
		mayo.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[88] = (e.getStateChange() == 1 ? true : false);
			}
		});
		dressing.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[89] = (e.getStateChange() == 1 ? true : false);
			}
		});
		mustard.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[90] = (e.getStateChange() == 1 ? true : false);
			}
		});
		salsa.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[91] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bbqSauce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[92] = (e.getStateChange() == 1 ? true : false);
			}
		});
		italianDressing.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[93] = (e.getStateChange() == 1 ? true : false);
			}
		});
		peachJam.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[94] = (e.getStateChange() == 1 ? true : false);
			}
		});
		honey.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[95] = (e.getStateChange() == 1 ? true : false);
			}
		});
		marinara.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[96] = (e.getStateChange() == 1 ? true : false);
			}
		});
		soySauce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[97] = (e.getStateChange() == 1 ? true : false);
			}
		});
		enchiladaSauce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[98] = (e.getStateChange() == 1 ? true : false);
			}
		});
		sweetSourSauce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[99] = (e.getStateChange() == 1 ? true : false);
			}
		});
		tomatoSauce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[100] = (e.getStateChange() == 1 ? true : false);
			}
		});
		spaghettiSauce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[101] = (e.getStateChange() == 1 ? true : false);
			}
		});
		curryPowder.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[102] = (e.getStateChange() == 1 ? true : false);
			}
		});
		salt.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[103] = (e.getStateChange() == 1 ? true : false);
			}
		});
		garlic.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[104] = (e.getStateChange() == 1 ? true : false);
			}
		});
		paprika.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[105] = (e.getStateChange() == 1 ? true : false);
			}
		});
		italianSeasoning.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[106] = (e.getStateChange() == 1 ? true : false);
			}
		});
		basil.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[107] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cumin.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[108] = (e.getStateChange() == 1 ? true : false);
			}
		});
		sugar.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[109] = (e.getStateChange() == 1 ? true : false);
			}
		});
		sesameSeed.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[110] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cayennePepper.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[111] = (e.getStateChange() == 1 ? true : false);
			}
		});
		redPepperFlakes.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[112] = (e.getStateChange() == 1 ? true : false);
			}
		});
		chilePaste.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[113] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cilantro.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[114] = (e.getStateChange() == 1 ? true : false);
			}
		});
		lemonPepper.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[115] = (e.getStateChange() == 1 ? true : false);
			}
		});
		chiliPowder.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[116] = (e.getStateChange() == 1 ? true : false);
			}
		});
		blackPepper.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[117] = (e.getStateChange() == 1 ? true : false);
			}
		});
		vinegar.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[118] = (e.getStateChange() == 1 ? true : false);
			}
		});
		oliveOil.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[119] = (e.getStateChange() == 1 ? true : false);
			}
		});
		limeJuice.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[120] = (e.getStateChange() == 1 ? true : false);
			}
		});
		lemonJuice.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[121] = (e.getStateChange() == 1 ? true : false);
			}
		});
		fishSauce.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[122] = (e.getStateChange() == 1 ? true : false);
			}
		});
		beefStock.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[123] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bakingPowder.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[124] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bakingSoda.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[125] = (e.getStateChange() == 1 ? true : false);
			}
		});
		chickenStock.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[126] = (e.getStateChange() == 1 ? true : false);
			}
		});
		vegetableOil.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[127] = (e.getStateChange() == 1 ? true : false);
			}
		});
		ranchDressingMix.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[128] = (e.getStateChange() == 1 ? true : false);
			}
		});
		pestoSauceMix.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[129] = (e.getStateChange() == 1 ? true : false);
			}
		});
		chilli.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[130] = (e.getStateChange() == 1 ? true : false);
			}
		});
		creamOfChicken.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[131] = (e.getStateChange() == 1 ? true : false);
			}
		});
		creamOfMushroom.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[132] = (e.getStateChange() == 1 ? true : false);
			}
		});
		strawberries.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[133] = (e.getStateChange() == 1 ? true : false);
			}
		});
		raspberries.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[134] = (e.getStateChange() == 1 ? true : false);
			}
		});
		blueberries.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[135] = (e.getStateChange() == 1 ? true : false);
			}
		});
		blackberries.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[136] = (e.getStateChange() == 1 ? true : false);
			}
		});
		yogurt.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[137] = (e.getStateChange() == 1 ? true : false);
			}
		});
		orange.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[138] = (e.getStateChange() == 1 ? true : false);
			}
		});
		spongeCake.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[139] = (e.getStateChange() == 1 ? true : false);
			}
		});
		whippedCream.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[140] = (e.getStateChange() == 1 ? true : false);
			}
		});
		almonds.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[141] = (e.getStateChange() == 1 ? true : false);
			}
		});
		oats.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[142] = (e.getStateChange() == 1 ? true : false);
			}
		});
		pecans.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[143] = (e.getStateChange() == 1 ? true : false);
			}
		});
		brownSugar.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[144] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cinnamon.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[145] = (e.getStateChange() == 1 ? true : false);
			}
		});
		ginger.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[146] = (e.getStateChange() == 1 ? true : false);
			}
		});
		vanillaExtract.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[147] = (e.getStateChange() == 1 ? true : false);
			}
		});
		bisquickMix.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[148] = (e.getStateChange() == 1 ? true : false);
			}
		});
		twinkies.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[149] = (e.getStateChange() == 1 ? true : false);
			}
		});
		grahamCracker.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[150] = (e.getStateChange() == 1 ? true : false);
			}
		});
		strawberryJam.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[151] = (e.getStateChange() == 1 ? true : false);
			}
		});
		appliePieFilling.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[152] = (e.getStateChange() == 1 ? true : false);
			}
		});
		nutmeg.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[153] = (e.getStateChange() == 1 ? true : false);
			}
		});
		caramelSquares.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[154] = (e.getStateChange() == 1 ? true : false);
			}
		});
		cakeMix.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				checked[155] = (e.getStateChange() == 1 ? true : false);
			}
		});

		f.setSize(900, 650);
		f.setLayout(null);
		f.setVisible(true);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setResizable(false);
	}

	// clickButton.exe
	public void actionPerformed(ActionEvent e) {
		// Clear All Selected
		if (e.getSource() == clearAll) {
			for (int i = 0; i < checked.length; i++) {
				checked[i] = false;
			}
			lime.setSelected(false);
			apple.setSelected(false);
			watermelon.setSelected(false);
			pears.setSelected(false);
			peaches.setSelected(false);
			honeyDew.setSelected(false);
			cantaloupe.setSelected(false);
			lemon.setSelected(false);
			avocado.setSelected(false);
			lettuce.setSelected(false);
			tomato.setSelected(false);
			refriedBeans.setSelected(false);
			beans.setSelected(false);
			hashBrown.setSelected(false);
			potato.setSelected(false);
			corn.setSelected(false);
			frozenBroccoli.setSelected(false);
			celery.setSelected(false);
			onion.setSelected(false);
			cucumber.setSelected(false);
			blackBeans.setSelected(false);
			jalapenos.setSelected(false);
			cabbage.setSelected(false);
			coleslaw.setSelected(false);
			V8Juice.setSelected(false);
			greenPepper.setSelected(false);
			radish.setSelected(false);
			asparagus.setSelected(false);
			carrot.setSelected(false);
			cornstarch.setSelected(false);
			bellPepper.setSelected(false);
			spinach.setSelected(false);
			frozenVegetables.setSelected(false);
			redPepper.setSelected(false);
			frozenCorn.setSelected(false);
			kidneyBeans.setSelected(false);
			cornmeal.setSelected(false);
			zucchini.setSelected(false);
			mushrooms.setSelected(false);
			polenta.setSelected(false);
			yellowPepper.setSelected(false);
			creamOfMushroom.setSelected(false);
			taterTots.setSelected(false);
			bread.setSelected(false);
			tortilla.setSelected(false);
			tortillaChips.setSelected(false);
			englishMuffin.setSelected(false);
			crackers.setSelected(false);
			glassNoodles.setSelected(false);
			flour.setSelected(false);
			rice.setSelected(false);
			breadCrumbs.setSelected(false);
			penne.setSelected(false);
			garlicBread.setSelected(false);
			eggNoodles.setSelected(false);
			spaghetti.setSelected(false);
			macNCheese.setSelected(false);
			turkey.setSelected(false);
			ham.setSelected(false);
			tuna.setSelected(false);
			egg.setSelected(false);
			bacon.setSelected(false);
			meat.setSelected(false);
			chicken.setSelected(false);
			cashews.setSelected(false);
			pistachios.setSelected(false);
			prosciutto.setSelected(false);
			shrimp.setSelected(false);
			walnuts.setSelected(false);
			peanutButter.setSelected(false);
			pepporoni.setSelected(false);
			frozenMeatballs.setSelected(false);
			groundSausage.setSelected(false);
			salmon.setSelected(false);
			kielbasa.setSelected(false);
			fishFillet.setSelected(false);
			porkChops.setSelected(false);
			chickenWings.setSelected(false);
			cheese.setSelected(false);
			butter.setSelected(false);
			creamCheese.setSelected(false);
			sourCream.setSelected(false);
			pimientos.setSelected(false);
			goatCheese.setSelected(false);
			mozzarella.setSelected(false);
			feta.setSelected(false);
			milk.setSelected(false);
			swiss.setSelected(false);
			parmesan.setSelected(false);
			mayo.setSelected(false);
			dressing.setSelected(false);
			mustard.setSelected(false);
			salsa.setSelected(false);
			bbqSauce.setSelected(false);
			italianDressing.setSelected(false);
			peachJam.setSelected(false);
			honey.setSelected(false);
			marinara.setSelected(false);
			soySauce.setSelected(false);
			enchiladaSauce.setSelected(false);
			sweetSourSauce.setSelected(false);
			curryPowder.setSelected(false);
			salt.setSelected(false);
			garlic.setSelected(false);
			paprika.setSelected(false);
			italianSeasoning.setSelected(false);
			basil.setSelected(false);
			cumin.setSelected(false);
			sugar.setSelected(false);
			sesameSeed.setSelected(false);
			cayennePepper.setSelected(false);
			redPepperFlakes.setSelected(false);
			chilePaste.setSelected(false);
			blackPepper.setSelected(false);
			vinegar.setSelected(false);
			oliveOil.setSelected(false);
			limeJuice.setSelected(false);
			lemonJuice.setSelected(false);
			fishSauce.setSelected(false);
			beefStock.setSelected(false);
			bakingPowder.setSelected(false);
			bakingSoda.setSelected(false);
			chickenStock.setSelected(false);
			vegetableOil.setSelected(false);
			ranchDressingMix.setSelected(false);
			pestoSauceMix.setSelected(false);
			chilli.setSelected(false);
			creamOfChicken.setSelected(false);
			tomatoSauce.setSelected(false);
			spaghettiSauce.setSelected(false);
			cilantro.setSelected(false);
			chiliPowder.setSelected(false);
			lemonPepper.setSelected(false);
			strawberries.setSelected(false);
			raspberries.setSelected(false);
			blueberries.setSelected(false);
			blackberries.setSelected(false);
			yogurt.setSelected(false);
			orange.setSelected(false);
			spongeCake.setSelected(false);
			whippedCream.setSelected(false);
			almonds.setSelected(false);
			oats.setSelected(false);
			pecans.setSelected(false);
			brownSugar.setSelected(false);
			cinnamon.setSelected(false);
			ginger.setSelected(false);
			vanillaExtract.setSelected(false);
			bisquickMix.setSelected(false);
			twinkies.setSelected(false);
			grahamCracker.setSelected(false);
			strawberryJam.setSelected(false);
			appliePieFilling.setSelected(false);
			nutmeg.setSelected(false);
			caramelSquares.setSelected(false);
			cakeMix.setSelected(false);
		}
		
		// Load Selected Profile Picture
		if (e.getSource() == p0 || e.getSource() == p1 || e.getSource() == p2 || e.getSource() == p3
				|| e.getSource() == p4 || e.getSource() == p5 || e.getSource() == p6 || e.getSource() == p7
				|| e.getSource() == p8 || e.getSource() == p9) {
			profilePic.setIcon(new ImageIcon("src/images/Profile" + e.getActionCommand() + ".png"));
			profilePicLog.set(currUser, e.getActionCommand());
			try {
				BufferedWriter bw = new BufferedWriter(new FileWriter("profiles.txt"));

				for (int i = 0; i < userLog.size(); i++) {
					bw.write("" + displayNameLog.get(i));
					bw.newLine();
					bw.write("" + userLog.get(i));
					bw.newLine();
					bw.write("" + passLog.get(i));
					bw.newLine();
					bw.write("" + profilePicLog.get(i));
					bw.newLine();
					bw.write("" + displayColorLog.get(i));
					bw.newLine();
					bw.write("" + question1Log.get(i));
					bw.newLine();
					bw.write("" + question2Log.get(i));
					bw.newLine();
					bw.write("" + question3Log.get(i));
					bw.newLine();
					bw.write("" + answer1Log.get(i));
					bw.newLine();
					bw.write("" + answer2Log.get(i));
					bw.newLine();
					bw.write("" + answer3Log.get(i));
					bw.newLine();
				}
				bw.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

		// Forgot Password
		if (e.getSource() == forgotPassword) {
			if (userLog.size() > 0) {
				fUsername.setText("");
				loginP.setVisible(false);
				forgotPasswordP.setVisible(true);
			} else
				JOptionPane.showMessageDialog(f, "There are no accounts available to change the password for.");
		}

		// Submit Username
		if (e.getSource() == submitUser) {
			if (userLog.contains(fUsername.getText())) {
				for (int i = 0; i < userLog.size(); i++) {
					if (userLog.get(i) == fUsername.getText()) {
						fCurrUser = i;
					}
				}
				fquestion1.setText("" + question1Log.get(fCurrUser));
				fquestion2.setText("" + question2Log.get(fCurrUser));
				fquestion3.setText("" + question3Log.get(fCurrUser));
				fquestion1TF.setText("");
				fquestion2TF.setText("");
				fquestion3TF.setText("");
				forgotPasswordUsernameP.setVisible(false);
				forgotPasswordQuestionsP.setVisible(true);
			} else
				JOptionPane.showMessageDialog(f, "Username does not exist.");
		}

		// Answer Security Questions
		if (e.getSource() == answerQuestions) {
			if (fquestion1TF.getText().equals(answer1Log.get(fCurrUser))) {
				if (fquestion2TF.getText().equals(answer2Log.get(fCurrUser))) {
					if (fquestion3TF.getText().equals(answer3Log.get(fCurrUser))) {
						forgotPasswordQuestionsP.setVisible(false);
						forgotPasswordPasswordP.setVisible(true);
					} else
						JOptionPane.showMessageDialog(f, "One of your answers is incorrect.");
				} else
					JOptionPane.showMessageDialog(f, "One of your answers is incorrect.");
			} else
				JOptionPane.showMessageDialog(f, "One of your answers is incorrect.");
		}

		if (e.getSource() == fChangePasswordB) {
			String currPassStr = new String(fCurrPasswordPF.getPassword());
			String newPassStr = new String(fNewPasswordPF.getPassword());
			String confirmNewPassStr = new String(fConfirmNewPasswordPF.getPassword());
			if (!currPassStr.equals(passLog.get(fCurrUser))) {
				JOptionPane.showMessageDialog(f, "Incorrect password for this account.");
			} else if (newPassStr.equals(passLog.get(fCurrUser))) {
				JOptionPane.showMessageDialog(f, "New password cannot be the same as old password.");
			} else if (!newPassStr.equals(confirmNewPassStr)) {
				JOptionPane.showMessageDialog(f, "Please confirm your new password.");
			} else {
				passLog.set(fCurrUser, confirmNewPassStr);
				fCurrPasswordPF.setText("");
				fNewPasswordPF.setText("");
				fConfirmNewPasswordPF.setText("");
				try {
					BufferedWriter bw = new BufferedWriter(new FileWriter("profiles.txt"));

					for (int i = 0; i < userLog.size(); i++) {
						bw.write("" + displayNameLog.get(i));
						bw.newLine();
						bw.write("" + userLog.get(i));
						bw.newLine();
						bw.write("" + passLog.get(i));
						bw.newLine();
						bw.write("" + profilePicLog.get(i));
						bw.newLine();
						bw.write("" + displayColorLog.get(i));
						bw.newLine();
						bw.write("" + question1Log.get(i));
						bw.newLine();
						bw.write("" + question2Log.get(i));
						bw.newLine();
						bw.write("" + question3Log.get(i));
						bw.newLine();
						bw.write("" + answer1Log.get(i));
						bw.newLine();
						bw.write("" + answer2Log.get(i));
						bw.newLine();
						bw.write("" + answer3Log.get(i));
						bw.newLine();
					}
					bw.close();
				} catch (Exception ex) {
					ex.printStackTrace();
				}
				JOptionPane.showMessageDialog(f, "Password has been changed.");
				forgotPasswordP.setVisible(false);
				forgotPasswordPasswordP.setVisible(false);
				forgotPasswordUsernameP.setVisible(true);
				loginP.setVisible(true);
			}
		}

		// Security Question Answers
		if (e.getSource() == submitAnswers) {
			if (question1TF.getText() != "") {
				if (question2TF.getText() != "") {
					if (question3TF.getText() != "") {
						answer1Log.add(question1TF.getText());
						answer2Log.add(question2TF.getText());
						answer3Log.add(question3TF.getText());
						question1Log.add(q1.getItemAt(q1.getSelectedIndex()));
						question2Log.add(q2.getItemAt(q2.getSelectedIndex()));
						question3Log.add(q3.getItemAt(q3.getSelectedIndex()));
						securityP.setVisible(false);
						loginP.setVisible(true);
						JOptionPane.showMessageDialog(f, "Account has been created.");
						try {
							BufferedWriter bw = new BufferedWriter(new FileWriter("profiles.txt"));

							for (int i = 0; i < userLog.size(); i++) {
								bw.write("" + displayNameLog.get(i));
								bw.newLine();
								bw.write("" + userLog.get(i));
								bw.newLine();
								bw.write("" + passLog.get(i));
								bw.newLine();
								bw.write("" + profilePicLog.get(i));
								bw.newLine();
								bw.write("" + displayColorLog.get(i));
								bw.newLine();
								bw.write("" + question1Log.get(i));
								bw.newLine();
								bw.write("" + question2Log.get(i));
								bw.newLine();
								bw.write("" + question3Log.get(i));
								bw.newLine();
								bw.write("" + answer1Log.get(i));
								bw.newLine();
								bw.write("" + answer2Log.get(i));
								bw.newLine();
								bw.write("" + answer3Log.get(i));
								bw.newLine();
							}
							bw.close();
						} catch (Exception ex) {
							ex.printStackTrace();
						}
					} else {
						JOptionPane.showMessageDialog(f, "Please answer question 3.");
					}
				} else {
					JOptionPane.showMessageDialog(f, "Please answer question 2.");
				}
			} else {
				JOptionPane.showMessageDialog(f, "Please answer question 1.");
			}
		}

		// Load Selected Display Color
		if (e.getSource() == d0 || e.getSource() == d1 || e.getSource() == d2 || e.getSource() == d3
				|| e.getSource() == d4 || e.getSource() == d5 || e.getSource() == d6 || e.getSource() == d7
				|| e.getSource() == d8 || e.getSource() == d9) {
			switch (e.getActionCommand()) {
			case "0":
				homeP.setBackground(Color.orange);
				selectP.setBackground(Color.orange);
				displayP.setBackground(Color.orange);
				favoritesP.setBackground(Color.orange);
				customizeP.setBackground(Color.orange);
				changePasswordP.setBackground(Color.orange);
				changeDisplayP.setBackground(Color.orange);
				break;
			case "1":
				homeP.setBackground(Color.red);
				selectP.setBackground(Color.red);
				displayP.setBackground(Color.red);
				favoritesP.setBackground(Color.red);
				customizeP.setBackground(Color.red);
				changePasswordP.setBackground(Color.red);
				changeDisplayP.setBackground(Color.red);
				break;
			case "2":
				homeP.setBackground(Color.blue);
				selectP.setBackground(Color.blue);
				displayP.setBackground(Color.blue);
				favoritesP.setBackground(Color.blue);
				customizeP.setBackground(Color.blue);
				changePasswordP.setBackground(Color.blue);
				changeDisplayP.setBackground(Color.blue);
				break;
			case "3":
				homeP.setBackground(Color.yellow);
				selectP.setBackground(Color.yellow);
				displayP.setBackground(Color.yellow);
				favoritesP.setBackground(Color.yellow);
				customizeP.setBackground(Color.yellow);
				changePasswordP.setBackground(Color.yellow);
				changeDisplayP.setBackground(Color.yellow);
				break;
			case "4":
				homeP.setBackground(Color.green);
				selectP.setBackground(Color.green);
				displayP.setBackground(Color.green);
				favoritesP.setBackground(Color.green);
				customizeP.setBackground(Color.green);
				changePasswordP.setBackground(Color.green);
				changeDisplayP.setBackground(Color.green);
				break;
			case "5":
				homeP.setBackground(Color.magenta);
				selectP.setBackground(Color.magenta);
				displayP.setBackground(Color.magenta);
				favoritesP.setBackground(Color.magenta);
				customizeP.setBackground(Color.magenta);
				changePasswordP.setBackground(Color.magenta);
				changeDisplayP.setBackground(Color.magenta);
				break;
			case "6":
				homeP.setBackground(Color.pink);
				selectP.setBackground(Color.pink);
				displayP.setBackground(Color.pink);
				favoritesP.setBackground(Color.pink);
				customizeP.setBackground(Color.pink);
				changePasswordP.setBackground(Color.pink);
				changeDisplayP.setBackground(Color.pink);
				break;
			case "7":
				homeP.setBackground(Color.gray);
				selectP.setBackground(Color.gray);
				displayP.setBackground(Color.gray);
				favoritesP.setBackground(Color.gray);
				customizeP.setBackground(Color.gray);
				changePasswordP.setBackground(Color.gray);
				changeDisplayP.setBackground(Color.gray);
				break;
			case "8":
				homeP.setBackground(Color.white);
				selectP.setBackground(Color.white);
				displayP.setBackground(Color.white);
				favoritesP.setBackground(Color.white);
				customizeP.setBackground(Color.white);
				changePasswordP.setBackground(Color.white);
				changeDisplayP.setBackground(Color.white);
				break;
			case "9":
				homeP.setBackground(Color.black);
				selectP.setBackground(Color.black);
				displayP.setBackground(Color.black);
				favoritesP.setBackground(Color.black);
				customizeP.setBackground(Color.black);
				changePasswordP.setBackground(Color.black);
				changeDisplayP.setBackground(Color.black);
				break;
			}
			displayColorLog.set(currUser, e.getActionCommand());
			try {
				BufferedWriter bw = new BufferedWriter(new FileWriter("profiles.txt"));

				for (int i = 0; i < userLog.size(); i++) {
					bw.write("" + displayNameLog.get(i));
					bw.newLine();
					bw.write("" + userLog.get(i));
					bw.newLine();
					bw.write("" + passLog.get(i));
					bw.newLine();
					bw.write("" + profilePicLog.get(i));
					bw.newLine();
					bw.write("" + displayColorLog.get(i));
					bw.newLine();
					bw.write("" + question1Log.get(i));
					bw.newLine();
					bw.write("" + question2Log.get(i));
					bw.newLine();
					bw.write("" + question3Log.get(i));
					bw.newLine();
					bw.write("" + answer1Log.get(i));
					bw.newLine();
					bw.write("" + answer2Log.get(i));
					bw.newLine();
					bw.write("" + answer3Log.get(i));
					bw.newLine();
				}
				bw.close();
			} catch (Exception ex) {
				ex.printStackTrace();
			}
		}

		// Next Recipe
		if (e.getSource() == nextRecipe && validRecipes.size() > currRecipe + 1) {
			currRecipe++;
			recipeTitle.setText(validRecipes.get(currRecipe).getName());
			recipeTime.setText("Time to Make: " + validRecipes.get(currRecipe).getTime() + " minutes");
			recipeLink.setText(validRecipes.get(currRecipe).getLink());
			recipeIngredientList.setText("Ingredients: " + validRecipes.get(currRecipe).getIngredientList());
			previousRecipe.setBackground(Color.green);
			if (validRecipes.size() <= currRecipe + 1) {
				nextRecipe.setBackground(Color.gray);
			}
			currDisplayRecipe++;
			recipeOutOfRecipes.setText(currDisplayRecipe + "/" + totalRecipes);
		}

		// Previous Recipe
		if (e.getSource() == previousRecipe && currRecipe > 0) {
			currRecipe--;
			recipeTitle.setText(validRecipes.get(currRecipe).getName());
			recipeTime.setText("Time to Make: " + validRecipes.get(currRecipe).getTime() + " minutes");
			recipeLink.setText(validRecipes.get(currRecipe).getLink());
			recipeIngredientList.setText("Ingredients: " + validRecipes.get(currRecipe).getIngredientList());
			nextRecipe.setBackground(Color.green);
			if (currRecipe <= 0) {
				previousRecipe.setBackground(Color.gray);
			}
			currDisplayRecipe--;
			recipeOutOfRecipes.setText(currDisplayRecipe + "/" + totalRecipes);
		}

		// Menu Selections
		if (e.getSource() == home) {
			if (mbDisplay) {
				homeP.setVisible(true);
				selectP.setVisible(false);
				displayP.setVisible(false);
				favoritesP.setVisible(false);
				customizeP.setVisible(false);
				changePasswordP.setVisible(false);
				changeDisplayP.setVisible(false);
			}
		}
		if (e.getSource() == search) {
			if (mbDisplay) {
				homeP.setVisible(false);
				selectP.setVisible(true);
				displayP.setVisible(false);
				favoritesP.setVisible(false);
				customizeP.setVisible(false);
				changePasswordP.setVisible(false);
				changeDisplayP.setVisible(false);
			}
		}
		if (e.getSource() == favorites) {
			if (mbDisplay) {
				homeP.setVisible(false);
				favoritesP.setVisible(true);
				selectP.setVisible(false);
				displayP.setVisible(false);
				customizeP.setVisible(false);
				changePasswordP.setVisible(false);
				changeDisplayP.setVisible(false);
			}
		}
		if (e.getSource() == customize) {
			if (mbDisplay) {
				homeP.setVisible(false);
				selectP.setVisible(false);
				favoritesP.setVisible(false);
				displayP.setVisible(false);
				customizeP.setVisible(true);
				changePasswordP.setVisible(false);
				changeDisplayP.setVisible(false);
			}
		}
		if (e.getSource() == changePassword) {
			if (mbDisplay) {
				homeP.setVisible(false);
				selectP.setVisible(false);
				favoritesP.setVisible(false);
				displayP.setVisible(false);
				customizeP.setVisible(false);
				changePasswordP.setVisible(true);
				changeDisplayP.setVisible(false);
			}
		}
		if (e.getSource() == changeDisplayColor) {
			if (mbDisplay) {
				homeP.setVisible(false);
				selectP.setVisible(false);
				favoritesP.setVisible(false);
				displayP.setVisible(false);
				customizeP.setVisible(false);
				changePasswordP.setVisible(false);
				changeDisplayP.setVisible(true);
			}
		}
		if (e.getSource() == logout) {
			if (mbDisplay) {
				homeP.setVisible(false);
				favoritesP.setVisible(false);
				selectP.setVisible(false);
				displayP.setVisible(false);
				customizeP.setVisible(false);
				changePasswordP.setVisible(false);
				changeDisplayP.setVisible(false);
				loginP.setVisible(true);
				username.setText("");
				password.setText("");
				mbDisplay = false;
				welcome.setText("");
			}
		}
		if (e.getSource() == homeSearch) {
			homeP.setVisible(false);
			selectP.setVisible(true);
		}
		if (e.getSource() == homeFavorites) {
			homeP.setVisible(false);
			favoritesP.setVisible(true);
		}
		if (e.getSource() == homeCustomize) {
			homeP.setVisible(false);
			customizeP.setVisible(true);
		}
		if (e.getSource() == b) {
			// Display Time Entered
			int time = 60;
			try {
				String text = tf.getText();
				if (text.equals(""))
					l2.setText("No time was entered; displaying all recipes.");
				else {
					time = Integer.parseInt(text);
					l2.setText("Displaying recipes that can be made in " + time + " minutes or less.");
				}
			} catch (Exception ex) {
				System.out.println(ex);
			}

			// Display Microwave Required
			if (appliance[0].equals("true")) {
				microwaveRequired.setText("Microwave Selected? Yes");
			} else {
				microwaveRequired.setText("Microwave Selected? No");
			}
			
			// Display Oven Required
			if (appliance[1].equals("true")) {
				ovenRequired.setText("Oven Selected? Yes");
			} else {
				ovenRequired.setText("Oven Selected? No");
			}
			
			// Display Stove Required
			if (appliance[2].equals("true")) {
				stoveRequired.setText("Stove Selected? Yes");
			} else {
				stoveRequired.setText("Stove Selected? No");
			}

			// Display Selected Ingredients
			checkedBox = "Selected Ingredients: ";
			for (int i = userIngredients.size(); i > 0; i--) {
				userIngredients.remove(i - 1);
			}
			int firstIngredient = 0;
			for (int i = 0; i < checked.length; i++) {
				if (checked[i]) {
					if (firstIngredient > 0 && checkedBox.length() < 90)
						checkedBox += ", ";
					else
						firstIngredient++;
					if (checkedBox.length() < 90) {
						checkedBox += ingredients[i];
					}
					userIngredients.add(ingredients[i]);
				}
			}
			if (checkedBox.length() >= 90) {
				checkedBox += ",...";
			}
			selected.setText(checkedBox);

			Database holder = new Database();
			holder.fillDatabase();
			currRecipe = 0;
			previousRecipe.setBackground(Color.gray);
			for (int i = validRecipes.size(); i > 0; i--) {
				validRecipes.remove(i - 1);
			}
			if (searchAllRecipesB) {
				validRecipes = searchAllRecipe(time, appliance, userIngredients, holder.getRecipes());
			} else {
				validRecipes = searchRecipe(time, appliance, userIngredients, holder.getRecipes());
			}
			if (validRecipes.size() >= 1) {
				totalRecipes = 1;
				for(int i = 1; i < validRecipes.size(); i++) {
					totalRecipes++;
				}
				recipeTitle.setText(validRecipes.get(currRecipe).getName());
				recipeTime.setText("Time to Make: " + validRecipes.get(currRecipe).getTime() + " minutes");
				recipeLink.setText(validRecipes.get(currRecipe).getLink());
				recipeIngredientList.setText("Ingredients: " + validRecipes.get(currRecipe).getIngredientList());
				currDisplayRecipe = 1;
				recipeOutOfRecipes.setText(currDisplayRecipe + "/" + totalRecipes);
			}
			if (validRecipes.size() > 1) {
				nextRecipe.setBackground(Color.green);
			}
			if (validRecipes.size() == 0) {
				recipeTitle.setText("No Recipes Found");
				recipeTime.setText("");
				recipeLink.setText("");
				recipeIngredientList.setText("");
			}

			// Switch Panes
			selectP.setVisible(false);
			favoritesP.setVisible(false);
			displayP.setVisible(true);
		}
		if (e.getSource() == login) {
			String userStr = username.getText();
			String passStr = new String(password.getPassword());
			for (int i = 0; i < userLog.size(); i++) {
				if (userStr.equals(userLog.get(i))) {
					if (passStr.equals(passLog.get(i))) {
						validLogin = true;
						currUser = i;
					} else {
						i = userLog.size();
					}
				}
			}
			if (validLogin) {
				homeP.setVisible(true);
				loginP.setVisible(false);
				mbDisplay = true;
				welcome = new JLabel();
				welcome.setFont(logoFont);
				welcome.setText("Welcome, " + displayNameLog.get(currUser) + "!");
				welcome.setBounds(150, 100, 900, 80);
				homeDisplayP.add(welcome);
				profilePic.setIcon(new ImageIcon("src/images/Profile" + profilePicLog.get(currUser) + ".png"));
				switch (profilePicLog.get(currUser)) {
				case "0":
					p0.setSelected(true);
					break;
				case "1":
					p1.setSelected(true);
					break;
				case "2":
					p2.setSelected(true);
					break;
				case "3":
					p3.setSelected(true);
					break;
				case "4":
					p4.setSelected(true);
					break;
				case "5":
					p5.setSelected(true);
					break;
				case "6":
					p6.setSelected(true);
					break;
				case "7":
					p7.setSelected(true);
					break;
				case "8":
					p8.setSelected(true);
					break;
				case "9":
					p9.setSelected(true);
					break;
				}
				switch (displayColorLog.get(currUser)) {
				case "0":
					d0.setSelected(true);
					break;
				case "1":
					d1.setSelected(true);
					break;
				case "2":
					d2.setSelected(true);
					break;
				case "3":
					d3.setSelected(true);
					break;
				case "4":
					d4.setSelected(true);
					break;
				case "5":
					d5.setSelected(true);
					break;
				case "6":
					d6.setSelected(true);
					break;
				case "7":
					d7.setSelected(true);
					break;
				case "8":
					d8.setSelected(true);
					break;
				case "9":
					d9.setSelected(true);
					break;
				}
				switch (displayColorLog.get(currUser)) {
				case "0":
					homeP.setBackground(Color.orange);
					selectP.setBackground(Color.orange);
					displayP.setBackground(Color.orange);
					favoritesP.setBackground(Color.orange);
					customizeP.setBackground(Color.orange);
					changePasswordP.setBackground(Color.orange);
					changeDisplayP.setBackground(Color.orange);
					break;
				case "1":
					homeP.setBackground(Color.red);
					selectP.setBackground(Color.red);
					displayP.setBackground(Color.red);
					favoritesP.setBackground(Color.red);
					customizeP.setBackground(Color.red);
					changePasswordP.setBackground(Color.red);
					changeDisplayP.setBackground(Color.red);
					break;
				case "2":
					homeP.setBackground(Color.blue);
					selectP.setBackground(Color.blue);
					displayP.setBackground(Color.blue);
					favoritesP.setBackground(Color.blue);
					customizeP.setBackground(Color.blue);
					changePasswordP.setBackground(Color.blue);
					changeDisplayP.setBackground(Color.blue);
					break;
				case "3":
					homeP.setBackground(Color.yellow);
					selectP.setBackground(Color.yellow);
					displayP.setBackground(Color.yellow);
					favoritesP.setBackground(Color.yellow);
					customizeP.setBackground(Color.yellow);
					changePasswordP.setBackground(Color.yellow);
					changeDisplayP.setBackground(Color.yellow);
					break;
				case "4":
					homeP.setBackground(Color.green);
					selectP.setBackground(Color.green);
					displayP.setBackground(Color.green);
					favoritesP.setBackground(Color.green);
					customizeP.setBackground(Color.green);
					changePasswordP.setBackground(Color.green);
					changeDisplayP.setBackground(Color.green);
					break;
				case "5":
					homeP.setBackground(Color.magenta);
					selectP.setBackground(Color.magenta);
					displayP.setBackground(Color.magenta);
					favoritesP.setBackground(Color.magenta);
					customizeP.setBackground(Color.magenta);
					changePasswordP.setBackground(Color.magenta);
					changeDisplayP.setBackground(Color.magenta);
					break;
				case "6":
					homeP.setBackground(Color.pink);
					selectP.setBackground(Color.pink);
					displayP.setBackground(Color.pink);
					favoritesP.setBackground(Color.pink);
					customizeP.setBackground(Color.pink);
					changePasswordP.setBackground(Color.pink);
					changeDisplayP.setBackground(Color.pink);
					break;
				case "7":
					homeP.setBackground(Color.gray);
					selectP.setBackground(Color.gray);
					displayP.setBackground(Color.gray);
					favoritesP.setBackground(Color.gray);
					customizeP.setBackground(Color.gray);
					changePasswordP.setBackground(Color.gray);
					changeDisplayP.setBackground(Color.gray);
					break;
				case "8":
					homeP.setBackground(Color.white);
					selectP.setBackground(Color.white);
					displayP.setBackground(Color.white);
					favoritesP.setBackground(Color.white);
					customizeP.setBackground(Color.white);
					changePasswordP.setBackground(Color.white);
					changeDisplayP.setBackground(Color.white);
					break;
				case "9":
					homeP.setBackground(Color.black);
					selectP.setBackground(Color.black);
					displayP.setBackground(Color.black);
					favoritesP.setBackground(Color.black);
					customizeP.setBackground(Color.black);
					changePasswordP.setBackground(Color.black);
					changeDisplayP.setBackground(Color.black);
					break;
				}
				recipeTitle.setText("");
				recipeTime.setText("");
				recipeLink.setText("");
				recipeIngredientList.setText("");
			} else {
				JOptionPane.showMessageDialog(f, "Username or password is incorrect.");
			}
		}
		if (e.getSource() == signup) {
			loginP.setVisible(false);
			signupP.setVisible(true);
			usernameSignUp.setText("");
			passwordSignUp.setText("");
			displayNameTF.setText("");
		}
		if (e.getSource() == createAccount) {
			String displayNameStr = displayNameTF.getText();
			String userStr = usernameSignUp.getText();
			String passStr = new String(passwordSignUp.getPassword());
			if (displayNameStr.equals("")) {
				JOptionPane.showMessageDialog(f, "Display Name must not be blank.");
			} else if (userStr.equals("")) {
				JOptionPane.showMessageDialog(f, "Username must not be blank.");
			} else if (passStr.equals("")) {
				JOptionPane.showMessageDialog(f, "Password must not be blank.");
			} else if (userLog.contains(userStr)) {
				JOptionPane.showMessageDialog(f, "Username already exists");
			} else {
				displayNameLog.add(displayNameStr);
				userLog.add(userStr);
				passLog.add(passStr);
				profilePicLog.add("0");
				displayColorLog.add("0");
				signupP.setVisible(false);
				securityP.setVisible(true);
				question1TF.setText("");
				question2TF.setText("");
				question3TF.setText("");
			}
		}
		if (e.getSource() == back) {
			signupP.setVisible(false);
			loginP.setVisible(true);
		}

		if (e.getSource() == changePasswordB) {
			String currPassStr = new String(currPasswordPF.getPassword());
			String newPassStr = new String(newPasswordPF.getPassword());
			String confirmNewPassStr = new String(confirmNewPasswordPF.getPassword());
			if (!currPassStr.equals("") && !newPassStr.equals("") && !confirmNewPassStr.equals("")) {
				if (!currPassStr.equals(passLog.get(currUser))) {
					JOptionPane.showMessageDialog(f, "Incorrect password for this account.");
				} else if (newPassStr.equals(passLog.get(currUser))) {
					JOptionPane.showMessageDialog(f, "New password cannot be the same as old password.");
				} else if (!newPassStr.equals(confirmNewPassStr)) {
					JOptionPane.showMessageDialog(f, "Please confirm your new password.");
				} else {
					passLog.set(currUser, confirmNewPassStr);
					currPasswordPF.setText("");
					newPasswordPF.setText("");
					confirmNewPasswordPF.setText("");
					try {
						BufferedWriter bw = new BufferedWriter(new FileWriter("profiles.txt"));

						for (int i = 0; i < userLog.size(); i++) {
							bw.write("" + displayNameLog.get(i));
							bw.newLine();
							bw.write("" + userLog.get(i));
							bw.newLine();
							bw.write("" + passLog.get(i));
							bw.newLine();
							bw.write("" + profilePicLog.get(i));
							bw.newLine();
							bw.write("" + displayColorLog.get(i));
							bw.newLine();
							bw.write("" + question1Log.get(i));
							bw.newLine();
							bw.write("" + question2Log.get(i));
							bw.newLine();
							bw.write("" + question3Log.get(i));
							bw.newLine();
							bw.write("" + answer1Log.get(i));
							bw.newLine();
							bw.write("" + answer2Log.get(i));
							bw.newLine();
							bw.write("" + answer3Log.get(i));
							bw.newLine();
						}
						bw.close();
					} catch (Exception ex) {
						ex.printStackTrace();
					}
					JOptionPane.showMessageDialog(f, "Password has been changed.");
				}
			} else
				JOptionPane.showMessageDialog(f, "Password fields cannot be blank.");
		}
	}

	public static void main(String[] args) {
		new main();
	}

	static ArrayList<Recipe> searchRecipe(int time, String[] appliances, ArrayList<String> userInput,
			ArrayList<Recipe> database) {

		ArrayList<Recipe> sendToMain = new ArrayList<Recipe>();
		for (int k = 0; k < userInput.size(); k++) {
			userInput.set(k, userInput.get(k).toLowerCase());
		}
		for (int i = 0; i < database.size(); i++) {
			boolean validRecipe = true;
			/*"Lime","Apple","Watermelon","Pears","Peaches","Honeydew","Cantaloupe","Lemon",
				"Frozen Broccoli","Celery",
				"Onion","Cucumber","Black Beans","Jalapeno","Cabbage","Coleslaw","V8 Juice","Green Pepper",
				"Radish","Asparagus","Carrot","Cornstarch","Bell Pepper","Spinach","Frozen Vegetables","Red Pepper","Frozen Corn",
				"Kidney Beans","Cornmeal","Zucchini","Mushrooms","Polenta","Yellow Pepper","Tater Tots",
				"Glass Noodles","Flour","Rice","Bread Crumbs",
				"Penne","Garlic Bread","Egg Noodles","Spaghetti","Mac n Cheese",
				"Chicken","Cashews","Pistachios","Prosciutto","Shrimp","Walnuts","Peanut Butter","Pepperoni","Frozen Meatballs",
				"Ground Sausage","Salmon","Kielbasa","Fish Fillets","Pork Chops","Chicken Wings"
				"Pimientos","Goat Cheese","Mozzarella","Feta","Milk","Swiss","Parmesan"
				"Salsa","BBQ Sauce","Italian Dressing","Peach Jam","Honey","Marinara","Soy Sauce","Enchilada Sauce","Sweet and Sour Sauce",
				"Tomato Sauce","Spaghetti Sauce","Curry Powder","Salt","Garlic","Paprika","Italian Seasoning","Basil","Cumin","Sugar",
				"Sesame Seed","Cayenne","Red Pepper Flakes","Chile Paste","Cilantro","Lemon Pepper","Chili Powder","Black Pepper",
				"Vinegar","Olive Oil","Lime Juice","Lemon Juice","Fish Sauce","Beef Stock","Baking Powder","Baking Soda","Chicken Stock",
				"Vegetable Oil","Ranch Dressing Mix","Pesto Sauce Mix","Chilli","Cream of Chicken","Cream of Mushroom"
				"Strawberries",
			"Raspberries","Blueberries","Blackberries","Yogurt","Orange","Sponge Cake","Whipped Cream","Almonds","Oats","Pecans",
			"Brown Sugar","Cinnamon","Ginger","Vanilla Extract","Bisquick Mix","Twinkies","Graham Cracker","Strawberry Jam",
			"Apple Pie Filling","Nutmeg","Caramel Squares","Cake Mix*/
			if (!userInput.contains("turkey") && database.get(i).getIngredientList().contains("turkey")) {
				validRecipe = false;
			} else if (!userInput.contains("ham") && database.get(i).getIngredientList().contains("ham")) {
				validRecipe = false;
			} else if (!userInput.contains("avocado") && database.get(i).getIngredientList().contains("avocado")) {
				validRecipe = false;
			} else if (!userInput.contains("bread") && database.get(i).getIngredientList().contains("bread")) {
				validRecipe = false;
			} else if (!userInput.contains("butter") && database.get(i).getIngredientList().contains("butter")) {
				validRecipe = false;
			} else if (!userInput.contains("eggs") && database.get(i).getIngredientList().contains("eggs")) {
				validRecipe = false;
			} else if (!userInput.contains("cheese") && database.get(i).getIngredientList().contains("cheese")) {
				validRecipe = false;
			} else if (!userInput.contains("lettuce") && database.get(i).getIngredientList().contains("lettuce")) {
				validRecipe = false;
			} else if (!userInput.contains("tomato") && database.get(i).getIngredientList().contains("tomato")) {
				validRecipe = false;
			} else if (!userInput.contains("tortilla") && database.get(i).getIngredientList().contains("tortilla")) {
				validRecipe = false;
			} else if (!userInput.contains("cream cheese")
					&& database.get(i).getIngredientList().contains("cream cheese")) {
				validRecipe = false;
			} else if (!userInput.contains("beans") && database.get(i).getIngredientList().contains("beans")) {
				validRecipe = false;
			} else if (!userInput.contains("potato") && database.get(i).getIngredientList().contains("potato")) {
				validRecipe = false;
			} else if (!userInput.contains("dressing") && database.get(i).getIngredientList().contains("dressing")) {
				validRecipe = false;
			} else if (!userInput.contains("mustard") && database.get(i).getIngredientList().contains("mustard")) {
				validRecipe = false;
			} else if (!userInput.contains("crackers") && database.get(i).getIngredientList().contains("crackers")) {
				validRecipe = false;
			} else if (!userInput.contains("corn") && database.get(i).getIngredientList().contains("corn")) {
				validRecipe = false;
			} else if (!userInput.contains("sour cream")
					&& database.get(i).getIngredientList().contains("sour cream")) {
				validRecipe = false;
			} else if (!userInput.contains("english muffin")
					&& database.get(i).getIngredientList().contains("english muffin")) {
				validRecipe = false;
			} else if (!userInput.contains("bacon") && database.get(i).getIngredientList().contains("bacon")) {
				validRecipe = false;
			} else if (!userInput.contains("refried beans")
					&& database.get(i).getIngredientList().contains("refried beans")) {
				validRecipe = false;
			} else if (!userInput.contains("tuna") && database.get(i).getIngredientList().contains("tuna")) {
				validRecipe = false;
			} else if (!userInput.contains("hash brown")
					&& database.get(i).getIngredientList().contains("hash brown")) {
				validRecipe = false;
			} else if (!userInput.contains("meat") && database.get(i).getIngredientList().contains("meat")) {
				validRecipe = false;
			} else if (!userInput.contains("tortilla chips")
					&& database.get(i).getIngredientList().contains("tortilla chips")) {
				validRecipe = false;
			} else if (!userInput.contains("mayo") && database.get(i).getIngredientList().contains("mayo")) {
				validRecipe = false;
			}
			if (validRecipe) {
				sendToMain.add(database.get(i));
			}
		}

		for (int j = 0; j < sendToMain.size(); j++) {
			if (sendToMain.get(j).getTime() > time) {
				sendToMain.remove(j);
			}
		}
		for (int k = 0; k < sendToMain.size(); k++) {
			if (appliances[0].equals("false") && sendToMain.get(k).getMicrowaveable().equals("true")) {
				sendToMain.remove(k);
			}
			if (appliances[1].equals("false") && sendToMain.get(k).getOven().equals("true")) {
				sendToMain.remove(k);
			}
			if (appliances[2].equals("false") && sendToMain.get(k).getStove().equals("true")) {
				sendToMain.remove(k);
			}
		}

		return sendToMain;
	}

	static ArrayList<Recipe> searchAllRecipe(int time, String[] appliances, ArrayList<String> userInput,
			ArrayList<Recipe> database) {

		ArrayList<Recipe> sendToMain = new ArrayList<Recipe>();
		for (int k = 0; k < userInput.size(); k++) {
			userInput.set(k, userInput.get(k).toLowerCase());
		}
		for (int i = 0; i < database.size(); i++) {
			boolean validRecipe = false;
			if (userInput.contains("turkey") && database.get(i).getIngredientList().contains("turkey")) {
				validRecipe = true;
			} else if (userInput.contains("ham") && database.get(i).getIngredientList().contains("ham")) {
				validRecipe = true;
			} else if (userInput.contains("avocado") && database.get(i).getIngredientList().contains("avocado")) {
				validRecipe = true;
			} else if (userInput.contains("bread") && database.get(i).getIngredientList().contains("bread")) {
				validRecipe = true;
			} else if (userInput.contains("butter") && database.get(i).getIngredientList().contains("butter")) {
				validRecipe = true;
			} else if (userInput.contains("eggs") && database.get(i).getIngredientList().contains("eggs")) {
				validRecipe = true;
			} else if (userInput.contains("cheese") && database.get(i).getIngredientList().contains("cheese")) {
				validRecipe = true;
			} else if (userInput.contains("lettuce") && database.get(i).getIngredientList().contains("lettuce")) {
				validRecipe = true;
			} else if (userInput.contains("tomato") && database.get(i).getIngredientList().contains("tomato")) {
				validRecipe = true;
			} else if (userInput.contains("tortilla") && database.get(i).getIngredientList().contains("tortilla")) {
				validRecipe = true;
			} else if (userInput.contains("cream cheese")
					&& database.get(i).getIngredientList().contains("cream cheese")) {
				validRecipe = true;
			} else if (userInput.contains("beans") && database.get(i).getIngredientList().contains("beans")) {
				validRecipe = true;
			} else if (userInput.contains("potato") && database.get(i).getIngredientList().contains("potato")) {
				validRecipe = true;
			} else if (userInput.contains("dressing") && database.get(i).getIngredientList().contains("dressing")) {
				validRecipe = true;
			} else if (userInput.contains("mustard") && database.get(i).getIngredientList().contains("mustard")) {
				validRecipe = true;
			} else if (userInput.contains("crackers") && database.get(i).getIngredientList().contains("crackers")) {
				validRecipe = true;
			} else if (userInput.contains("corn") && database.get(i).getIngredientList().contains("corn")) {
				validRecipe = true;
			} else if (userInput.contains("sour cream") && database.get(i).getIngredientList().contains("sour cream")) {
				validRecipe = true;
			} else if (userInput.contains("english muffin")
					&& database.get(i).getIngredientList().contains("english muffin")) {
				validRecipe = true;
			} else if (userInput.contains("bacon") && database.get(i).getIngredientList().contains("bacon")) {
				validRecipe = true;
			} else if (userInput.contains("refried beans")
					&& database.get(i).getIngredientList().contains("refried beans")) {
				validRecipe = true;
			} else if (userInput.contains("tuna") && database.get(i).getIngredientList().contains("tuna")) {
				validRecipe = true;
			} else if (userInput.contains("hash brown") && database.get(i).getIngredientList().contains("hash brown")) {
				validRecipe = true;
			} else if (userInput.contains("meat") && database.get(i).getIngredientList().contains("meat")) {
				validRecipe = true;
			} else if (userInput.contains("tortilla chips")
					&& database.get(i).getIngredientList().contains("tortilla chips")) {
				validRecipe = true;
			} else if (userInput.contains("mayo") && database.get(i).getIngredientList().contains("mayo")) {
				validRecipe = true;
			}
			if (validRecipe) {
				sendToMain.add(database.get(i));
			}
		}

		for (int j = 0; j < sendToMain.size(); j++) {
			if (sendToMain.get(j).getTime() > time) {
				sendToMain.remove(j);
			}
		}
		for (int k = 0; k < sendToMain.size(); k++) {
			if (appliances[0].equals("false") && sendToMain.get(k).getMicrowaveable().equals("true")) {
				sendToMain.remove(k);
			}
			if (appliances[1].equals("false") && sendToMain.get(k).getOven().equals("true")) {
				sendToMain.remove(k);
			}
			if (appliances[2].equals("false") && sendToMain.get(k).getStove().equals("true")) {
				sendToMain.remove(k);
			}
		}

		return sendToMain;
	}
}
